[
  {
    "Id": "432270",
    "ThreadId": "209660",
    "Html": "<p>Suppose I have a Customer model, say</p>\r\n<div style=\"color:black;background-color:white\">\r\n<pre>    <span style=\"color:blue\">public</span> <span style=\"color:blue\">class</span> Customer\r\n    {\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">string</span> Name { <span style=\"color:blue\">get</span>; <span style=\"color:blue\">set</span>; }\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">string</span> Description { <span style=\"color:blue\">get</span>; <span style=\"color:blue\">set</span>; }\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">int</span> Age { <span style=\"color:blue\">get</span>; <span style=\"color:blue\">set</span>; }\r\n    }\r\n</pre>\r\n</div>\r\n<p>And I have a corresponding CustomerViewModel</p>\r\n<div style=\"color:black;background-color:white\">\r\n<pre>    <span style=\"color:blue\">public</span> <span style=\"color:blue\">class</span> CustomerViewModel : ViewModelBase\r\n    {\r\n        <span style=\"color:blue\">public</span> Customer Model\r\n        {\r\n            <span style=\"color:blue\">get</span>;\r\n            <span style=\"color:blue\">private</span> <span style=\"color:blue\">set</span>;\r\n        }\r\n\r\n        <span style=\"color:blue\">public</span> CustomerViewModel(Customer model)\r\n        {\r\n            Model = model;\r\n        }\r\n    }\r\n</pre>\r\n<p>In the template example (as well as the Get Started example), we end up creating an ObservableCollection of CustomerViewModels. A CustomerView is never created, but a DataTemplate is created for the CustomerViewModel inside MainWindow.xaml. Is this the CustomerView? How would I go about creating a CustomerView for all future users of my CustomerViewModel? How does the Locator relate to this? What I would like to do is to create a CustomerView which I can then edit in Blend - and have it propagate to any UserControl that holds Customers. (In fact, I would love to have two views, a CustomerView and CustomerEditView...). Can anyone out there advise?</p>\r\n<p>Thanks in advance.</p>\r\n<p>Respectfully,</p>\r\n<p>Tim</p>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2010-04-17T09:18:21.017-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "432324",
    "ThreadId": "209660",
    "Html": "<p>Hi,</p>\r\n<p>The DataTemplate is the View for a CustomerViewModel. Note that the CustomerViewModel is a different kind of ViewModel than the MainViewModel. The MainVM is data bound to a view explicitly (through the ViewModelLocator). On the other hand, the CustomerVM is bound to the DataTemplate implicitly. This is done by Silverlight or WPF when you specify that a collection of CustomerVM is the ItemsSource of a list control (such as a ListBox), and that the DataTemplate is the ItemTemplate property of the list control.</p>\r\n<p>Because the binding is made implicitly by SL or WPF, it is not visible anywhere that the DataContext of the DataTemplate is the CustomerVM. However Blend is able to display this in the Data panel when you are editing the ItemTemplate of the ListBox.</p>\r\n<p>In order to get two views (Edit view and normal view), you need to work with the ItemContainerStyle in WPF, and use triggers to switch between the edit mode and the normal mode.</p>\r\n<p>For Silverlight, since triggers are not available, you need to edit the ItemContainerStyle, then edit the ItemControlTemplate and define the appearance of the template for the Selected and SelectedUnfocused states.</p>\r\n<p>Does that make sense?</p>\r\n<p>Laurent</p>",
    "PostedDate": "2010-04-17T14:50:36.147-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]
[
  {
    "Id": "487005",
    "ThreadId": "225472",
    "Html": "<p>I was just writing my umpteenth method to receive PropertyChangedMessageBase messages which then compares the type of the message's sender and a property on that sender when I realized that I could be utilizing tokens. I took at look at the RaisePropertyChanged and Broadcast methods in ViewModelBase and tried to add the ability to specify a Token along with the RaisePropertyChanged, and realized that the IMessenger contract doesn't include Messenger.cs's Send overload that can take a Token.</p>\r\n<p>Here are the modifications I made to allow a RaisePropertyChanged overload to send a Token.</p>\r\n<p>&nbsp;</p>\r\n<div style=\"color:black;background-color:white\">\r\n<pre><span style=\"color:blue\">public</span> <span style=\"color:blue\">interface</span> IMessenger\r\n{\r\n    <span style=\"color:green\">/* clipped out unchanged code */</span>\r\n\r\n    <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;summary&gt;</span>\r\n    <span style=\"color:gray\">///</span><span style=\"color:green\"> Sends a message to registered recipients. The message will</span>\r\n    <span style=\"color:gray\">///</span><span style=\"color:green\"> reach only recipients that registered for this message type</span>\r\n    <span style=\"color:gray\">///</span><span style=\"color:green\"> using one of the Register methods, and that are</span>\r\n    <span style=\"color:gray\">///</span><span style=\"color:green\"> of the targetType.</span>\r\n    <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;/summary&gt;</span>\r\n    <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;typeparam name=&quot;TMessage&quot;&gt;</span><span style=\"color:green\">The type of message that will be sent.&lt;/typeparam&gt;</span>\r\n    <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;param name=&quot;message&quot;&gt;</span><span style=\"color:green\">The message to send to registered recipients.&lt;/param&gt;</span>\r\n    <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;param name=&quot;token&quot;&gt;</span><span style=\"color:green\">A token for a messaging channel. If a recipient registers</span>\r\n    <span style=\"color:gray\">///</span><span style=\"color:green\"> using a token, and a sender sends a message using the same token, then this</span>\r\n    <span style=\"color:gray\">///</span><span style=\"color:green\"> message will be delivered to the recipient. Other recipients who did not</span>\r\n    <span style=\"color:gray\">///</span><span style=\"color:green\"> use a token when registering (or who used a different token) will not</span>\r\n    <span style=\"color:gray\">///</span><span style=\"color:green\"> get the message. Similarly, messages sent without any token, or with a different</span>\r\n    <span style=\"color:gray\">///</span><span style=\"color:green\"> token, will not be delivered to that recipient.&lt;/param&gt;</span>\r\n    <span style=\"color:blue\">void</span> Send&lt;TMessage&gt;(TMessage message, <span style=\"color:blue\">object</span> token);\r\n\r\n    <span style=\"color:green\">/* clipped out unchanged code */</span>\r\n}\r\n\r\n<span style=\"color:blue\">public</span> <span style=\"color:blue\">abstract</span> <span style=\"color:blue\">class</span> ViewModelBase : INotifyPropertyChanged, ICleanup, IDisposable\r\n{\r\n    <span style=\"color:green\">/* clipped out unchanged code */</span>\r\n\r\n    <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;summary&gt;</span>\r\n    <span style=\"color:gray\">///</span><span style=\"color:green\"> Broadcasts a PropertyChangedMessage using either the instance of</span>\r\n    <span style=\"color:gray\">///</span><span style=\"color:green\"> the Messenger that was passed to this class (if available)</span>\r\n    <span style=\"color:gray\">///</span><span style=\"color:green\"> or the Messenger's default instance.</span>\r\n    <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;/summary&gt;</span>\r\n    <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;typeparam name=&quot;T&quot;&gt;</span><span style=\"color:green\">The type of the property that</span>\r\n    <span style=\"color:gray\">///</span><span style=\"color:green\"> changed.&lt;/typeparam&gt;</span>\r\n    <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;param name=&quot;oldValue&quot;&gt;</span><span style=\"color:green\">The value of the property before it</span>\r\n    <span style=\"color:gray\">///</span><span style=\"color:green\"> changed.&lt;/param&gt;</span>\r\n    <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;param name=&quot;newValue&quot;&gt;</span><span style=\"color:green\">The value of the property after it</span>\r\n    <span style=\"color:gray\">///</span><span style=\"color:green\"> changed.&lt;/param&gt;</span>\r\n    <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;param name=&quot;propertyName&quot;&gt;</span><span style=\"color:green\">The name of the property that</span>\r\n    <span style=\"color:gray\">///</span><span style=\"color:green\"> changed.&lt;/param&gt;</span>\r\n    <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;param name=&quot;token&quot;&gt;</span><span style=\"color:green\">The token value to send along with the PropertyChangedMessage.&lt;/param&gt;</span>\r\n    <span style=\"color:blue\">protected</span> <span style=\"color:blue\">virtual</span> <span style=\"color:blue\">void</span> Broadcast&lt;T&gt;(T oldValue, T newValue, <span style=\"color:blue\">string</span> propertyName, <span style=\"color:blue\">object</span> token)\r\n    {\r\n        <span style=\"color:blue\">var</span> message = <span style=\"color:blue\">new</span> PropertyChangedMessage&lt;T&gt;(<span style=\"color:blue\">this</span>, oldValue, newValue, propertyName);\r\n\r\n        <span style=\"color:blue\">if</span> (MessengerInstance != <span style=\"color:blue\">null</span>)\r\n        {\r\n            MessengerInstance.Send(message, token);\r\n        }\r\n        <span style=\"color:blue\">else</span>\r\n        {\r\n            Messenger.Default.Send(message, token);\r\n        }\r\n    }\r\n\r\n    <span style=\"color:green\">/* clipped out unchanged code */</span>\r\n\r\n    <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;summary&gt;</span>\r\n    <span style=\"color:gray\">///</span><span style=\"color:green\"> Raises the PropertyChanged event if needed, and broadcasts a</span>\r\n    <span style=\"color:gray\">///</span><span style=\"color:green\"> PropertyChangedMessage using the Messenger instance (or the</span>\r\n    <span style=\"color:gray\">///</span><span style=\"color:green\"> static default instance if no Messenger instance is available).</span>\r\n    <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;/summary&gt;</span>\r\n    <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;typeparam name=&quot;T&quot;&gt;</span><span style=\"color:green\">The type of the property that</span>\r\n    <span style=\"color:gray\">///</span><span style=\"color:green\"> changed.&lt;/typeparam&gt;</span>\r\n    <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;param name=&quot;propertyName&quot;&gt;</span><span style=\"color:green\">The name of the property that</span>\r\n    <span style=\"color:gray\">///</span><span style=\"color:green\"> changed.&lt;/param&gt;</span>\r\n    <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;param name=&quot;oldValue&quot;&gt;</span><span style=\"color:green\">The property's value before the change</span>\r\n    <span style=\"color:gray\">///</span><span style=\"color:green\"> occurred.&lt;/param&gt;</span>\r\n    <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;param name=&quot;newValue&quot;&gt;</span><span style=\"color:green\">The property's value after the change</span>\r\n    <span style=\"color:gray\">///</span><span style=\"color:green\"> occurred.&lt;/param&gt;</span>\r\n    <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;param name=&quot;broadcast&quot;&gt;</span><span style=\"color:green\">If true, a PropertyChangedMessage will</span>\r\n    <span style=\"color:gray\">///</span><span style=\"color:green\"> be broadcasted. If false, only the event will be raised.&lt;/param&gt;</span>\r\n    <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;param name=&quot;token&quot;&gt;</span><span style=\"color:green\">If not null, and if a PropertyChangedMessage</span>\r\n    <span style=\"color:gray\">///</span><span style=\"color:green\"> is broadcasted, the message is sent with the specified token.</span>\r\n    <span style=\"color:gray\">///</span><span style=\"color:green\"> If null, the PropertyChangedMessage is sent without a token.&lt;/param&gt;</span>\r\n    [SuppressMessage(<span style=\"color:#a31515\">&quot;Microsoft.Design&quot;</span>, <span style=\"color:#a31515\">&quot;CA1030:UseEventsWhereAppropriate&quot;</span>,\r\n        Justification = <span style=\"color:#a31515\">&quot;This cannot be an event&quot;</span>)]\r\n    <span style=\"color:blue\">protected</span> <span style=\"color:blue\">virtual</span> <span style=\"color:blue\">void</span> RaisePropertyChanged&lt;T&gt;(<span style=\"color:blue\">string</span> propertyName, T oldValue, T newValue, <span style=\"color:blue\"><br>                                                   bool</span> broadcast, <span style=\"color:blue\">object</span> token = <span style=\"color:blue\">null</span>)\r\n    {\r\n        RaisePropertyChanged(propertyName);\r\n\r\n        <span style=\"color:blue\">if</span> (broadcast)\r\n        {\r\n            Broadcast(oldValue, newValue, propertyName, token);\r\n        }\r\n    }\r\n\r\n    <span style=\"color:green\">/* clipped out unchanged code */</span>\r\n}\r\n</pre>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p>Laurent, do you think this might be a good addition to the next release of MVVM Light Toolkit?</p>",
    "PostedDate": "2010-08-31T07:54:37.313-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "487036",
    "ThreadId": "225472",
    "Html": "<p><span style=\"color:#7030a0;font-size:11pt\">Hey Matt,</span></p>\r\n<p><span style=\"color:#7030a0;font-size:11pt\">&nbsp;</span><span style=\"color:#7030a0;font-size:11pt\">Point 1 was on my backlog, I noticed that the other day when I wanted to mock a messenger using tokens ;)</span></p>\r\n<p><span style=\"color:#7030a0;font-size:11pt\">&nbsp;Point 2 sounds very reasonable, I will add it in V4.</span></p>\r\n<p><span style=\"color:#7030a0;font-size:11pt\">Thanks for the message,</span></p>\r\n<p><span style=\"color:#7030a0;font-size:11pt\">Cheers,</span></p>\r\n<p><span style=\"color:#7030a0;font-size:11pt\">Laurent</span></p>",
    "PostedDate": "2010-08-31T08:28:14.97-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "492924",
    "ThreadId": "225472",
    "Html": "<p>Laurent,</p>\r\n<p>In addition to the</p>\r\n<div style=\"color:black;background-color:white\">\r\n<pre><span style=\"color:blue\">void</span> Send&lt;TMessage&gt;(TMessage message, <span style=\"color:blue\">object</span> token);\r\n</pre>\r\n</div>\r\n<p>signature missing from IMessenger, the following two Register overloads are missing as well.</p>\r\n<div style=\"color:black;background-color:white\">\r\n<pre><span style=\"color:blue\">void</span> Register&lt;TMessage&gt;(<span style=\"color:blue\">object</span> recipient, <span style=\"color:blue\">object</span> token, Action&lt;TMessage&gt; action);\r\n<span style=\"color:blue\">void</span> Register&lt;TMessage&gt;(<span style=\"color:blue\">object</span> recipient, <span style=\"color:blue\">object</span> token, <span style=\"color:blue\">bool</span> receiveDerivedMessagesToo, Action&lt;TMessage&gt; action);\r\n</pre>\r\n</div>\r\n<p>I discovered the Send missing when I was trying to mock a messenger, but then when I was implementing some overloads in a Messenger class noticed that those two Registers were missing as well.</p>\r\n<p>&nbsp;</p>\r\n<p>Just out of curiosity, why doesn't Messenger.OverrideDefault take an IMessenger instead of Messenger?&nbsp; When I setup my mock test I had to create basically a shell Messenger that overrode all the method and called my mocked instance.&nbsp;</p>\r\n<div id=\"_mcePaste\" style=\"width:1px;height:1px;overflow:hidden;top:0px;left:-10000px\">﻿</div>",
    "PostedDate": "2010-09-13T10:58:17.453-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "494063",
    "ThreadId": "225472",
    "Html": "<p>Laurent,</p>\r\n<p>for point 1 I would suggest to create an explicit method along the lines &quot;RaiseAllPropertiesChanged&quot; to make it explicit. Personally, I think that using null or empty string to highlight such an important issue is not appopriate.</p>\r\n<p>Regards, Axel</p>",
    "PostedDate": "2010-09-15T13:00:54.647-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "527591",
    "ThreadId": "225472",
    "Html": "\r\n<p>I am trying to update another VM when a property changes (it's an aggregated property bases on other VM properties). So I am listening for an INT but from what I can see it means that every int property that is broadcasting would be received - I need to\r\n specify a token like I do in the SEND method so I can match senders to receivers - is this what this is doing? If so, any chance it could be released soon ;)</p>\r\n<p>Just wanted to specify my use case:</p>\r\n<p>I have a total based on the sum of 2 figures, and then the sum or 2 more figures multiplied by a factor. Hence if any one of these changes (ie. all different types; ints, decimals) I need to receive the UpdatePrize message. Hence I would like to specify\r\n the &quot;UpdatePrize&quot; token instead of doing it by type.</p>\r\n<p>&nbsp;</p>\r\n<p>Thanks</p>\r\n",
    "PostedDate": "2010-11-26T20:25:16.603-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "528093",
    "ThreadId": "225472",
    "Html": "\r\n<p>@PokerDIY: If you register for a message using the overload of Register that has a &quot;token&quot; parameter, then the recipient will only receive messages that are sent with the same token (using the corresponding overload of the &quot;Send&quot; method.</p>\r\n<p>For your scenario, you can use a normal RaisePropertyChanged method in your property setter, and then Send the message manually.</p>\r\n<p>In V4, I am introducing a RaisePropertyChanged(..., object token, ...) method that will do this automatically.</p>\r\n<p>Cheers,</p>\r\n<p>Laurent</p>\r\n",
    "PostedDate": "2010-11-29T01:36:53.647-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "528094",
    "ThreadId": "225472",
    "Html": "\r\n<p>@ThunderEagle, sorry for the delay. The reason why OverrideDefault takes a Messenger is historical, it was implemented in a time where IMessenger was missing. I will try to find a way to do the same using IMessenger in V4.</p>\r\n<p>Cheers,</p>\r\n<p>Laurent</p>\r\n",
    "PostedDate": "2010-11-29T01:40:28.827-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "622524",
    "ThreadId": "225472",
    "Html": "<p>Did the token argument get added in V4?&nbsp; Can't see it.&nbsp; I have the very same need to broadcast the PropertyChanged to interested parties.&nbsp; I guess the RelayCommand with callback actually solves my particular problem but generally I use the tokens to&nbsp; direct the messages to only those who care...</p>\r\n<p>Thanks.</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2011-06-03T06:46:40.067-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "623127",
    "ThreadId": "225472",
    "Html": "<p>Sorry, it was not added yet. In the meantime you can get the same effect by using the first overload of RaisePropertyChanged(string) and right after, send a PropertyChangedMessage with Messenger.Default.</p>\r\n<p>Cheers,</p>\r\n<p>Laurent</p>",
    "PostedDate": "2011-06-05T05:33:23.89-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "850445",
    "ThreadId": "225472",
    "Html": "\r\n<p>Hi Laurent,</p>\r\n<p>I am also looking for this feature to broadcast RaisePropertyChanged with a token.&nbsp; I'll use your above method, will work fine.&nbsp; I think some of the earlier property code snipits used this method with the broadcast commented out by default.</p>\r\n<p>As a side note, to help with the WP7 UI updates, it would be nice if broadcast RaisePropertyChanged could be async on a background thread - but I understand why you don't do this.&nbsp; Actually, thinking more about your suggestion, I can wrap the 2nd Messenger.Default\r\n PropertyChangedMessage in a Dispatcher.BeginInvoke to essentially get the same effect, allowing the UI to update prior to the broadcast being sent out.&nbsp; Yes?</p>\r\n<p>Thanks,</p>\r\n<p>Mike</p>\r\n",
    "PostedDate": "2012-06-18T10:22:44.067-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]
[
  {
    "Id": "553885",
    "ThreadId": "242908",
    "Html": "\r\n<p>what about creating asynchronous variant of Messenger, having</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre>executeAction.ExecuteWithObject(message);</pre>\r\n</div>\r\n<p>changed to</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre>Task.Factory.StartNew (executeAction.ExecuteWithObject, message, TaskCreationOptions.AttachedToParent);</pre>\r\n</div>\r\n<p>i created one (source below) by&nbsp;inheriting stock Messenger, but forced to change&nbsp;sources to make some&nbsp;members protected instead of private:</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:blue\">private</span> <span style=\"color:blue\">struct</span> WeakActionAndToken =&gt; <span style=\"color:blue\">protected</span> <span style=\"color:blue\">struct</span> WeakActionAndToken\r\n<span style=\"color:blue\">private</span> <span style=\"color:blue\">static</span> <span style=\"color:blue\">void</span> SendToList&lt;TMessage&gt;() =&gt; <span style=\"color:blue\">protected</span> <span style=\"color:blue\">virtual</span> <span style=\"color:blue\">void</span> SendToList&lt;TMessage&gt; ()\r\n<span style=\"color:blue\">private</span> <span style=\"color:blue\">void</span> SendToTargetOrType&lt;TMessage&gt;() =&gt; <span style=\"color:blue\">protected</span> <span style=\"color:blue\">void</span> SendToTargetOrType&lt;TMessage&gt;()\r\n\r\n</pre>\r\n</div>\r\n<p>what i need is either ready to use asynchronous Messenger, or some way to inherit and change behavior of standard Messenger. also very desirable is to&nbsp;have&nbsp;CancellationToken, TaskCreationOptions and TaskScheduler, stored in messenger for launching\r\n tasks either on&nbsp;by-subscriber basis or globally (specified in constructor like TaskFactory does)</p>\r\n<p>full source of my sample asynchronous&nbsp;Messenger (method SendToList&lt;TMessage&gt; is equal to standard Messenger except last line):</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:blue\">using</span> System;\r\n<span style=\"color:blue\">using</span> System.Linq;\r\n<span style=\"color:blue\">using</span> System.Threading.Tasks;\r\n<span style=\"color:blue\">using</span> GalaSoft.MvvmLight.Messaging;\r\n<span style=\"color:blue\">using</span> GalaSoft.MvvmLight.Helpers;\r\n\r\n<span style=\"color:blue\">namespace</span> BusinessClassLibrary\r\n{\r\n\t<span style=\"color:blue\">public</span> <span style=\"color:blue\">class</span> TaskMessenger : Messenger\r\n\t{\r\n\t\t<span style=\"color:blue\">private</span> <span style=\"color:blue\">static</span> Lazy&lt;TaskMessenger&gt; DefaultInstance = <span style=\"color:blue\">new</span> Lazy&lt;TaskMessenger&gt; ();\r\n\t\t<span style=\"color:blue\">public</span> <span style=\"color:blue\">static</span> <span style=\"color:blue\">new</span> TaskMessenger Default { <span style=\"color:blue\">get</span> { <span style=\"color:blue\">return</span> DefaultInstance.Value; } }\r\n\r\n\t\t<span style=\"color:blue\">public</span> TaskMessenger () : <span style=\"color:blue\">base</span> () { }\r\n\r\n\t\t<span style=\"color:blue\">public</span> Task SendTask&lt;TMessage&gt; (TMessage message)\r\n\t\t{\r\n\t\t\t<span style=\"color:blue\">return</span> Task.Factory.StartNew (SendMessage&lt;TMessage&gt;, message);\r\n\t\t}\r\n\t\t<span style=\"color:blue\">public</span> Task SendTask&lt;TMessage, TTarget&gt; (TMessage message)\r\n\t\t{\r\n\t\t\t<span style=\"color:blue\">return</span> Task.Factory.StartNew (SendMessageAndType&lt;TMessage, TTarget&gt;, message);\r\n\t\t}\r\n\t\t<span style=\"color:blue\">public</span> Task SendTask&lt;TMessage&gt; (TMessage message, <span style=\"color:blue\">object</span> token)\r\n\t\t{\r\n\t\t\t<span style=\"color:blue\">return</span> Task.Factory.StartNew (SendMessageAndToken&lt;TMessage&gt;, Tuple.Create&lt;TMessage, <span style=\"color:blue\">object</span>&gt; (message, token));\r\n\t\t}\r\n\r\n\t\t<span style=\"color:blue\">private</span> <span style=\"color:blue\">void</span> SendMessage&lt;TMessage&gt; (<span style=\"color:blue\">object</span> message)\r\n\t\t{\r\n\t\t\tSendToTargetOrType ((TMessage)message, <span style=\"color:blue\">null</span>, <span style=\"color:blue\">null</span>);\r\n\t\t}\r\n\r\n\t\t<span style=\"color:blue\">private</span> <span style=\"color:blue\">void</span> SendMessageAndType&lt;TMessage, TTarget&gt; (<span style=\"color:blue\">object</span> message)\r\n\t\t{\r\n\t\t\tSendToTargetOrType ((TMessage)message, <span style=\"color:blue\">typeof</span> (TTarget), <span style=\"color:blue\">null</span>);\r\n\t\t}\r\n\r\n\t\t<span style=\"color:blue\">private</span> <span style=\"color:blue\">void</span> SendMessageAndToken&lt;TMessage&gt; (<span style=\"color:blue\">object</span> tupleObj)\r\n\t\t{\r\n\t\t\t<span style=\"color:blue\">var</span> tuple = (Tuple&lt;TMessage, <span style=\"color:blue\">object</span>&gt;)tupleObj;\r\n\t\t\tSendToTargetOrType (tuple.Item1, <span style=\"color:blue\">null</span>, tuple.Item2);\r\n\t\t}\r\n\r\n\t\t<span style=\"color:blue\">protected</span> <span style=\"color:blue\">override</span> <span style=\"color:blue\">void</span> SendToList&lt;TMessage&gt; (\r\n\t\t\tTMessage message,\r\n\t\t\tSystem.Collections.Generic.IEnumerable&lt;WeakActionAndToken&gt; list,\r\n\t\t\tType messageTargetType,\r\n\t\t\t<span style=\"color:blue\">object</span> token)\r\n\t\t{\r\n\t\t\t<span style=\"color:blue\">if</span> (list != <span style=\"color:blue\">null</span>)\r\n\t\t\t{\r\n\t\t\t\t<span style=\"color:green\">// Clone to protect from people registering in a &quot;receive message&quot; method</span>\r\n\t\t\t\t<span style=\"color:green\">// Bug correction Messaging BL0004.007</span>\r\n\t\t\t\t<span style=\"color:blue\">var</span> listClone = list.Take (list.Count ()).ToList ();\r\n\r\n\t\t\t\t<span style=\"color:blue\">foreach</span> (<span style=\"color:blue\">var</span> item <span style=\"color:blue\">in</span> listClone)\r\n\t\t\t\t{\r\n\t\t\t\t\t<span style=\"color:blue\">var</span> executeAction = item.Action <span style=\"color:blue\">as</span> IExecuteWithObject;\r\n\r\n\t\t\t\t\t<span style=\"color:blue\">if</span> (executeAction != <span style=\"color:blue\">null</span>\r\n\t\t\t\t\t\t&amp;&amp; item.Action.IsAlive\r\n\t\t\t\t\t\t&amp;&amp; item.Action.Target != <span style=\"color:blue\">null</span>\r\n\t\t\t\t\t\t&amp;&amp; (messageTargetType == <span style=\"color:blue\">null</span>\r\n\t\t\t\t\t\t\t|| item.Action.Target.GetType () == messageTargetType\r\n\t\t\t\t\t\t\t|| messageTargetType.IsAssignableFrom (item.Action.Target.GetType ()))\r\n\t\t\t\t\t\t&amp;&amp; ((item.Token == <span style=\"color:blue\">null</span> &amp;&amp; token == <span style=\"color:blue\">null</span>)\r\n\t\t\t\t\t\t\t|| item.Token != <span style=\"color:blue\">null</span> &amp;&amp; item.Token.Equals (token)))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tTask.Factory.StartNew (executeAction.ExecuteWithObject, message, TaskCreationOptions.AttachedToParent);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n</pre>\r\n</div>\r\n",
    "PostedDate": "2011-01-23T02:05:14.587-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]
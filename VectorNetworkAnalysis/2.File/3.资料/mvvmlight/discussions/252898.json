[
  {
    "Id": "593317",
    "ThreadId": "252898",
    "Html": "<div style=\"color: black; background-color: white;\">\n<pre><div style=\"color: black; background-color: white;\"><pre>I'm not really sure someone in interested, but last month I struggled to map key events to my ViewModels. <br />Eventually I ended up with a derived EventToCommand class that can be used like this:<br /><br /><span style=\"color: blue;\">&lt;</span><span style=\"color: #a31515;\">i</span><span style=\"color: blue;\">:</span><span style=\"color: #a31515;\">Interaction.Triggers</span><span style=\"color: blue;\">&gt;</span>\n<span style=\"color: blue;\">   &lt;</span><span style=\"color: #a31515;\">i</span><span style=\"color: blue;\">:</span><span style=\"color: #a31515;\">EventTrigger</span> <span style=\"color: red;\">EventName</span><span style=\"color: blue;\">=</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">PreviewKeyDown</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">&gt;</span>\n      <span style=\"color: blue;\">&lt;</span><span style=\"color: #a31515;\">Mvvm</span><span style=\"color: blue;\">:</span><span style=\"color: #a31515;\">KeyEventToCommand</span> <span style=\"color: red;\">AssociatedKeys</span><span style=\"color: blue;\">=</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">Up</span><span style=\"color: black;\">\"</span> <span style=\"color: red;\">MarkEventAsHandled</span><span style=\"color: blue;\">=</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">True</span><span style=\"color: black;\">\"</span> <span style=\"color: red;\">Command</span><span style=\"color: blue;\">=</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">{Binding LoadPreviousInput}</span><span style=\"color: black;\">\"</span> <span style=\"color: blue;\">/&gt;</span>\n     <span style=\"color: blue;\"> &lt;</span><span style=\"color: #a31515;\">Mvvm</span><span style=\"color: blue;\">:</span><span style=\"color: #a31515;\">KeyEventToCommand</span> <span style=\"color: red;\">AssociatedKeys</span><span style=\"color: blue;\">=</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">Down</span><span style=\"color: black;\">\"</span> <span style=\"color: red;\">MarkEventAsHandled</span><span style=\"color: blue;\">=</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">True</span><span style=\"color: black;\">\"</span> <span style=\"color: red;\">Command</span><span style=\"color: blue;\">=</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">{Binding LoadNextInput}</span><span style=\"color: black;\">\"</span> <span style=\"color: blue;\">/&gt;</span>\n      <span style=\"color: blue;\">&lt;</span><span style=\"color: #a31515;\">Mvvm</span><span style=\"color: blue;\">:</span><span style=\"color: #a31515;\">KeyEventToCommand</span> <span style=\"color: red;\">AssociatedKeys</span><span style=\"color: blue;\">=</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">Enter</span><span style=\"color: black;\">\"</span> <span style=\"color: red;\">MarkEventAsHandled</span><span style=\"color: blue;\">=</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">False</span><span style=\"color: black;\">\"</span> <span style=\"color: red;\">Command</span><span style=\"color: blue;\">=</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">{Binding Execute}</span><span style=\"color: black;\">\"</span> <span style=\"color: blue;\">/&gt;</span>\n   <span style=\"color: blue;\">&lt;/</span><span style=\"color: #a31515;\">i</span><span style=\"color: blue;\">:</span><span style=\"color: #a31515;\">EventTrigger</span><span style=\"color: blue;\">&gt;</span>\n<span style=\"color: blue;\">&lt;/</span><span style=\"color: #a31515;\">i</span><span style=\"color: blue;\">:</span><span style=\"color: #a31515;\">Interaction.Triggers</span><span style=\"color: blue;\">&gt;</span>\n</pre>\nI believe its far more elegant than handling the KeyEventArgs in your ViewModel.<br />Anyway if someone encountered the same problem, feel free to use the class described below :)</div>\n<div style=\"color: black; background-color: white;\">\n<pre>    <span style=\"color: gray;\">///</span> <span style=\"color: gray;\">&lt;summary&gt;</span>\n    <span style=\"color: gray;\">///</span><span style=\"color: green;\"> Derived class from EventToCommand to map key events to a command.</span>\n    <span style=\"color: gray;\">///</span> <span style=\"color: gray;\">&lt;/summary&gt;</span>\n    <span style=\"color: blue;\">public</span> <span style=\"color: blue;\">class</span> KeyEventToCommand : EventToCommand\n    {\n        <span style=\"color: blue;\">#region</span> Variables and Properties\n\n        <span style=\"color: green;\">// Private Fields</span>\n        <span style=\"color: blue;\">private</span> List&lt;Key&gt; _associatedKeys = <span style=\"color: blue;\">new</span> List&lt;Key&gt;();      \n\n        <span style=\"color: gray;\">///</span> <span style=\"color: gray;\">&lt;summary&gt;</span>\n        <span style=\"color: gray;\">///</span><span style=\"color: green;\"> Gets or sets the associated keys.</span>\n        <span style=\"color: gray;\">///</span> <span style=\"color: gray;\">&lt;/summary&gt;</span>\n        <span style=\"color: gray;\">///</span> <span style=\"color: gray;\">&lt;value&gt;</span><span style=\"color: green;\">The associated keys.&lt;/value&gt;</span>\n        <span style=\"color: blue;\">public</span> <span style=\"color: blue;\">string</span> AssociatedKeys\n        {\n            <span style=\"color: blue;\">get</span>\n            {\n                StringBuilder sb = <span style=\"color: blue;\">new</span> StringBuilder();\n                <span style=\"color: blue;\">foreach</span> (Key key <span style=\"color: blue;\">in</span> _associatedKeys)\n                    sb.AppendFormat(<span style=\"color: #a31515;\">\"{0} \"</span>, key);\n                <span style=\"color: blue;\">if</span> (_associatedKeys.Count &gt; 1)\n                    sb.Remove(sb.Length - 1, 1);\n                <span style=\"color: blue;\">return</span> sb.ToString();\n            }\n            <span style=\"color: blue;\">set</span>\n            {\n                _associatedKeys.Clear();\n                <span style=\"color: blue;\">foreach</span> (<span style=\"color: blue;\">string</span> item <span style=\"color: blue;\">in</span> value.Split(<span style=\"color: #a31515;\">' '</span>))\n                {\n                    Key key;\n                    <span style=\"color: blue;\">if</span> (Enum.TryParse(item, <span style=\"color: blue;\">true</span>, <span style=\"color: blue;\">out</span> key))\n                        _associatedKeys.Add(key);\n                }\n            }\n        }\n\n        <span style=\"color: gray;\">///</span> <span style=\"color: gray;\">&lt;summary&gt;</span>\n        <span style=\"color: gray;\">///</span><span style=\"color: green;\"> Gets or sets a value indicating whether the EventArgs.Handled property must set to true after exection of the command.</span>\n        <span style=\"color: gray;\">///</span> <span style=\"color: gray;\">&lt;/summary&gt;</span>\n        <span style=\"color: gray;\">///</span> <span style=\"color: gray;\">&lt;value&gt;</span>\n        <span style=\"color: gray;\">///</span> \t<span style=\"color: gray;\">&lt;c&gt;</span><span style=\"color: green;\">true&lt;/c&gt; if EventArgs.Handled must to be set to true; otherwise, &lt;c&gt;false&lt;/c&gt;.</span>\n        <span style=\"color: gray;\">///</span> <span style=\"color: gray;\">&lt;/value&gt;</span>\n        <span style=\"color: blue;\">public</span> <span style=\"color: blue;\">bool</span> MarkEventAsHandled { <span style=\"color: blue;\">get</span>; <span style=\"color: blue;\">set</span>; }\n        \n        <span style=\"color: blue;\">#endregion</span>\n\n        <span style=\"color: blue;\">#region</span> Constructors and Destructors\n\n        <span style=\"color: gray;\">///</span> <span style=\"color: gray;\">&lt;summary&gt;</span>\n        <span style=\"color: gray;\">///</span><span style=\"color: green;\"> Initializes a new instance of the &lt;see cref=\"KeyEventToCommand\"/&gt; class.</span>\n        <span style=\"color: gray;\">///</span> <span style=\"color: gray;\">&lt;/summary&gt;</span>\n        <span style=\"color: blue;\">public</span> KeyEventToCommand()\n        {\n        }\n        \n        <span style=\"color: blue;\">#endregion</span>\n\n        <span style=\"color: blue;\">#region</span> Private Methods\n\n        <span style=\"color: gray;\">///</span> <span style=\"color: gray;\">&lt;summary&gt;</span>\n        <span style=\"color: gray;\">///</span><span style=\"color: green;\"> Executes the trigger.</span>\n        <span style=\"color: gray;\">///</span> <span style=\"color: gray;\">&lt;para&gt;</span><span style=\"color: green;\">To access the EventArgs of the fired event, use a RelayCommand&amp;lt;EventArgs&amp;gt;</span>\n        <span style=\"color: gray;\">///</span><span style=\"color: green;\"> and leave the CommandParameter and CommandParameterValue empty!&lt;/para&gt;</span>\n        <span style=\"color: gray;\">///</span> <span style=\"color: gray;\">&lt;/summary&gt;</span>\n        <span style=\"color: gray;\">///</span> <span style=\"color: gray;\">&lt;param name=\"parameter\"&gt;</span><span style=\"color: green;\">The EventArgs of the fired event.&lt;/param&gt;</span>\n        <span style=\"color: blue;\">protected</span> <span style=\"color: blue;\">override</span> <span style=\"color: blue;\">void</span> Invoke(<span style=\"color: blue;\">object</span> parameter)\n        {\n            KeyEventArgs args = parameter <span style=\"color: blue;\">as</span> KeyEventArgs;\n            <span style=\"color: blue;\">if</span> (args == <span style=\"color: blue;\">null</span>)\n                <span style=\"color: blue;\">return</span>;\n\n            <span style=\"color: blue;\">if</span> (!_associatedKeys.Contains(args.Key))\n                <span style=\"color: blue;\">return</span>;\n\n            <span style=\"color: blue;\">base</span>.Invoke(parameter);\n\n            <span style=\"color: blue;\">if</span> (MarkEventAsHandled)\n                args.Handled = <span style=\"color: blue;\">true</span>;\n        }\n        \n        <span style=\"color: blue;\">#endregion</span>\n    }\n</pre>\n</div>\n</pre>\n</div>",
    "PostedDate": "2011-04-07T00:36:11.753-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "613299",
    "ThreadId": "252898",
    "Html": "<p>Hi,</p>\r\n<p>Just curious, why didn't you use the KeyEventTrigger available in Blend?</p>\r\n<p>Cheers,</p>\r\n<p>Laurent</p>",
    "PostedDate": "2011-05-16T05:25:38.81-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "630407",
    "ThreadId": "252898",
    "Html": "<p>@Beemers,</p>\r\n<p><em>I</em> like it! It sits nicely alongside my EventToCommand classes. You can refactor the AssociatedKeys getter to be a lot more simple though, no need to mess around with StringBuilder:</p>\r\n<p>\r\n<div style=\"color: black; background-color: white;\">\r\n<pre><span style=\"color: blue;\">private</span> <span style=\"color: blue;\">const</span> <span style=\"color: blue;\">string</span> KeySeparator = <span style=\"color: #a31515;\">\" \"</span>;\r\n\r\n<span style=\"color: blue;\">public</span> <span style=\"color: blue;\">string</span> AssociatedKeys\r\n{\r\n    <span style=\"color: blue;\">get</span>\r\n    {\r\n        <span style=\"color: blue;\">return</span> String.Join(KeySeparator, _associatedKeys);\r\n    }\r\n    <span style=\"color: blue;\">set</span>\r\n    {\r\n        _associatedKeys.Clear();\r\n        <span style=\"color: blue;\">foreach</span> (<span style=\"color: blue;\">string</span> item <span style=\"color: blue;\">in</span> value.Split(KeySeparator.ToCharArray()))\r\n        {\r\n            Key key;\r\n            <span style=\"color: blue;\">if</span> (Enum.TryParse(item, <span style=\"color: blue;\">true</span>, <span style=\"color: blue;\">out</span> key))\r\n            {\r\n                _associatedKeys.Add(key);\r\n            }\r\n        }\r\n\r\n    }\r\n}\r\n</pre>\r\n</div>\r\n</p>",
    "PostedDate": "2011-06-21T00:32:38-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "631372",
    "ThreadId": "252898",
    "Html": "<p>@ Laurent</p>\r\n<p>Sorry for the late reply. I missed your comment.<br />About the KeyTrigger, your probably right, I'm building wpf applications in visual studio and somehow I missed it.</p>\r\n<p>@ CrtlAltDel</p>\r\n<p>Nice addition, I will update my code tomorrow. Thanks :)</p>",
    "PostedDate": "2011-06-22T12:51:49.977-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]
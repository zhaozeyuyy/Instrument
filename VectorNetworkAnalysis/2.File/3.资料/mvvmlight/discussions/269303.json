[
  {
    "Id": "659027",
    "ThreadId": "269303",
    "Html": "\r\n<p>&nbsp;</p>\r\n<pre> /// \r\n    ///  Used with MessengerHelper to Auto-magically registers all methods with the MvvMLight Messenger.\r\n    /// \r\n    /// \r\n    /// [MessengerMethod]\r\n    /// publiv void OnMyMessage(MyMessage args){\r\n    /// }\r\n    /// \r\n    [AttributeUsage(AttributeTargets.Method)]\r\n    public class MessengerMethodAttribute : Attribute {\r\n\r\n        public object Token { get; set; }\r\n\r\n        public bool ReceiveDerivedMessagesToo { get; set; }\r\n    }\r\n\r\n    public static class MessengerHelper {\r\n\r\n        /// \r\n        /// Auto-magically registers all methods decorated with the MessengerMethodAttribute with the MvvMLight Messenger.\r\n        ///  \r\n        /// \r\n        /// public class MyModal {\r\n        ///     void MyModal() {\r\n        ///         NessengerHelper.Register(this);\r\n        ///     }\r\n        /// \r\n        ///     [MessengerMethod]\r\n        ///     publiv void OnMyMessage(MyMessage args) {\r\n        ///     }\r\n        /// }\r\n        /// \r\n        /// &lt;param name=&quot;instance&quot; /&gt;The instance with the methods to register\r\n        public static void Register(object instance)\r\n        {\r\n            // the view modal\r\n            var type = instance.GetType();\r\n\r\n            //loop through each method, possibly registering with the messenger\r\n            foreach (var method in type.GetMethods())\r\n            {\r\n                //get the attribute\r\n                var info =\r\n                     Attribute.GetCustomAttribute(method,\r\n                     typeof(MessengerMethodAttribute),\r\n                     true) as MessengerMethodAttribute;\r\n\r\n                //no MessengerMethod attribute ? ignore\r\n                if (info == null)\r\n                    continue;\r\n\r\n                //get input paramaters (the type to register for)\r\n                var paramaters = method.GetParameters();\r\n\r\n                if (paramaters.Count() != 1)\r\n                    throw new Exception(&quot;MessengerMethods must have exactly 1 input paramater.&quot;);\r\n\r\n                //create the Action delegate to pass into the messenger\r\n                var paramaterType = paramaters.Single().ParameterType;\r\n                var delgateType = Expression.GetActionType(new[] { paramaterType });\r\n                var delgate = Delegate.CreateDelegate(delgateType, instance, method);\r\n\r\n                //create the Registration paramater array\r\n                var registerParamaters = new[]\r\n                                            {\r\n                                                instance,\r\n                                                info.Token,\r\n                                                info.ReceiveDerivedMessagesToo,\r\n                                                delgate\r\n                                            };\r\n\r\n                // register with Messenger via Reflection\r\n                var registerMethod = Messenger.Default\r\n                        .GetType()\r\n                        .GetMethods()\r\n                    // note potential bug if they ever change the name of the Register method\r\n                        .Where(o =&gt; o.Name == &quot;Register&quot;)\r\n                    // note potential bug if they ever change the order\r\n                    // should find a better way to discover correct method overload\r\n                        .Last()\r\n                        .MakeGenericMethod(new[] { paramaterType });\r\n\r\n                registerMethod.Invoke(Messenger.Default, registerParamaters);\r\n            }\r\n\r\n        }\r\n\r\n\r\n    }</pre>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n",
    "PostedDate": "2011-08-16T12:34:29.093-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]
[
  {
    "Id": "829249",
    "ThreadId": "353774",
    "Html": "<p>Hi Laurent.</p>\n<p>I was trying to understand the reasoning behind using WeakActions in RelayToCommand.<br /> Does this try to target memory leak scenarios like the EventToCommand one?<br /> If so then i have to disagree with the solution for the&nbsp;following&nbsp;reasons:</p>\n<p><strong>1)</strong> Commands ARE supposed to hold on to the ViewModel.</p>\n<p>Its just the natural way of things.There is no point in weakly connecting them.If one goes&nbsp;away <br /> then the other will as well.There is no point in the Command outliving its container ViewModel. <br /> Its like adding a UserControl eventhandler on some control inside its visual tree. There is no <br /> leak there because they both hold on to each other ,as they are meant to do, and they die <br /> together.</p>\n<p>If the fear is that anyone that keeps the Command also keeps the ViewModel&nbsp;then that is <br /> reasonable and expected as well. If i need the command then i&nbsp;obviously&nbsp;need the ViewModel it <br /> acts upon.</p>\n<p>The Command anyways will be held through a databinding (DP) and there's built in support to be held weakly.</p>\n<p><strong>2)</strong> It forces a totally unnecessary restriction on the user of the API. Why o why should my already <br /> encapsulated command logic&nbsp;be forced to be public or static??</p>\n<p>This is the most trivial correct way of using commands from its inception :&nbsp;</p>\n<p>&nbsp;</p>\n<div style=\"color: black; background-color: white;\">\n<pre><span style=\"color: blue;\">public</span> ICommand AddCommand\n{\n   <span style=\"color: blue;\">get</span> { <span style=\"color: blue;\">return</span> <span style=\"color: blue;\">new</span> DelegateCommand(<span style=\"color: blue;\">this</span>.CanAdd, <span style=\"color: blue;\">this</span>.Add); }\n}\n\n<span style=\"color: blue;\">private</span> <span style=\"color: blue;\">bool</span> CanAdd() { <span style=\"color: blue;\">return</span> <span style=\"color: blue;\">true</span>; }\n\n<span style=\"color: blue;\">private</span> <span style=\"color: blue;\">void</span> Add() {}\n</pre>\n</div>\n<p>&nbsp;</p>\n<p>Does that mean that my private methods now HAVE to be public? If yes then *why*?</p>\n<p><strong>3)</strong> In trying to solve memory leaks it unfortunately focuses on the wrong link in the chain.</p>\n<p>In the case of EventToCommand the problem is in the fact that \"the Command holds on <br /> to the EventToCommand\" when it shouldn't.</p>\n<p>That connection is the right one to be solved and made weak with a <strong>WeakEventListener</strong>.</p>\n<p>So to recap : &nbsp;</p>\n<p>- Commands are meant to strongly reference their ViewModel.<br /> - Commands should not reference elements strongly when there is a reason.Its the responsibility of<br /> &nbsp;the user of the Command&nbsp;(and not the Command itself) though to know that reason and provide an ad-hoc <br /> solution like WeakEventListener (see EventToCommand)<br /> - Command callbacks should be instance private if they want!&nbsp;</p>\n<p>&nbsp;</p>\n<p>Looking forward to your thoughts on this.</p>\n<p>&nbsp;</p>\n<p>Thanx<br /> <br /> I have blogged about the issue&nbsp;<a title=\"Solving MvvmLight&rsquo;s EventToCommand Memory Leak (WP7)\" href=\"http://atomaras.wordpress.com/2012/04/23/solving-mvvmlights-eventtocommand-memory-leak-wp7/\" target=\"_blank\">here</a></p>",
    "PostedDate": "2012-04-27T00:17:14.52-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "829867",
    "ThreadId": "353774",
    "Html": "\r\n<div>\r\n<p><span style=\"font-size:11.0pt; font-family:\">Hi,</span></p>\r\n<p><span style=\"font-size:11.0pt; font-family:\"></span></p>\r\n<p><span style=\"font-size:11.0pt; font-family:\">My concern here was about the scenario where a RelayCommand’s Execute method is defined on another object. In that case the RelayCommand would hold a reference to that other object and there would be a potential\r\n leak. I do agree that it is not a common scenario, but it is one for which I got a bug report earlier.</span></p>\r\n<p><span style=\"font-size:11.0pt; font-family:\"></span></p>\r\n<p><span style=\"font-size:11.0pt; font-family:\">The issue with the privacy of methods is a side effect of Silverlight’s sandbox system (this issue does not exist in .NET for instance, the .NET implementation can handle private delegates too). That said, note\r\n that <b>you can continue to use private methods for your commands</b>. The WeakAction implementation detects if a private method is used in Silverlight, in which case it will use the old implementation. So if you use a private method, it works but there is\r\n a tiny risk of memory leak. If you use a public or static method, it works too and this is a true weak event implementation.</span></p>\r\n<p><span style=\"font-size:11.0pt; font-family:\"></span></p>\r\n<p><span style=\"font-size:11.0pt; font-family:\">Do you think that makes sense?</span></p>\r\n<p><span style=\"font-size:11.0pt; font-family:\"></span></p>\r\n<p><span style=\"font-size:11.0pt; font-family:\">Regarding the EventToCommand, I saw your blog post, and this is definitely something I want to improve. However I want to release V4 first because it solves other issues that are quite important. I think that\r\n the EventToCommand leak is going a good feature for V4.1.</span></p>\r\n<p><span style=\"font-size:11.0pt; font-family:\"></span></p>\r\n<p><span style=\"font-size:11.0pt; font-family:\">Cheers,</span></p>\r\n<p><span style=\"font-size:11.0pt; font-family:\">Laurent</span></p>\r\n<p><a name=\"_MailEndCompose\"><span style=\"font-size:11.0pt; font-family:\"></span></a></p>\r\n<div>\r\n<div style=\"border:none; border-top:solid #B5C4DF 1.0pt; padding:3.0pt 0in 0in 0in\">\r\n<p><b><span style=\"font-size:10.0pt; font-family:\">From:</span></b><span style=\"font-size:10.0pt; font-family:\"> atomaras\r\n<a href=\"mailto:[email removed]\">[email removed]</a> <br>\r\n<b>Sent:</b> Friday, April 27, 2012 9:17 AM<br>\r\n<b>To:</b> [email removed]<br>\r\n<b>Subject:</b> RelayCommand and WeakActions. Why? [mvvmlight:353774]</span></p>\r\n</div>\r\n</div>\r\n<p></p>\r\n<p><span style=\"font-size:9.0pt; font-family:\">From: atomaras</span></p>\r\n<div id=\"ThreadNotificationPostBody\" style=\"margin-bottom:24.0pt\">\r\n<p><span style=\"font-size:9.0pt; font-family:\">Hi Laurent.</span></p>\r\n<p><span style=\"font-size:9.0pt; font-family:\">I was trying to understand the reasoning behind using WeakActions in RelayToCommand.<br>\r\nDoes this try to target memory leak scenarios like the EventToCommand one?<br>\r\nIf so then i have to disagree with the solution for the following reasons:</span></p>\r\n<p><span style=\"font-size:9.0pt; font-family:\">1) Commands ARE supposed to hold on to the ViewModel.</span></p>\r\n<p><span style=\"font-size:9.0pt; font-family:\">Its just the natural way of things.There is no point in weakly connecting them.If one goes away\r\n<br>\r\nthen the other will as well.There is no point in the Command outliving its container ViewModel.\r\n<br>\r\nIts like adding a UserControl eventhandler on some control inside its visual tree. There is no\r\n<br>\r\nleak there.The control can die at any point cause IT holds the UserControl. The UserControl\r\n<br>\r\ncan die because IT holds the control and they die together.</span></p>\r\n<p><span style=\"font-size:9.0pt; font-family:\">If the fear is that anyone that keeps the Command also keeps the ViewModel then that is\r\n<br>\r\nreasonable and expected as well. If i need the command then i obviously need the ViewModel it\r\n<br>\r\nacts upon.</span></p>\r\n<p><span style=\"font-size:9.0pt; font-family:\">The Command anyways will be held through a databinding (DP) and there's built in support to be held weakly.</span></p>\r\n<p><span style=\"font-size:9.0pt; font-family:\">2) It forces a totally unnecessary restriction on the user of the API. Why o why should my already\r\n<br>\r\nencapsulated command logic be forced to be public or static??</span></p>\r\n<p><span style=\"font-size:9.0pt; font-family:\">This is the most trivial correct way of using commands from its inception :\r\n</span></p>\r\n<p><span style=\"font-size:9.0pt; font-family:\">public ICommand AddCommand</span></p>\r\n<p><span style=\"font-size:9.0pt; font-family:\">{</span></p>\r\n<p><span style=\"font-size:9.0pt; font-family:\">get { return new DelegateCommand(this.CanAdd, this.Add); }</span></p>\r\n<p><span style=\"font-size:9.0pt; font-family:\">}</span></p>\r\n<p><span style=\"font-size:9.0pt; font-family:\">private bool CanAdd() { return true; }</span></p>\r\n<p><span style=\"font-size:9.0pt; font-family:\">private void Add() {}</span></p>\r\n<p><span style=\"font-size:9.0pt; font-family:\">Does that mean that my private methods now HAVE to be public? If yes then *why*?</span></p>\r\n<p><span style=\"font-size:9.0pt; font-family:\">3) In trying to solve memory leaks it unfortunately focuses on the wrong link in the chain.</span></p>\r\n<p><span style=\"font-size:9.0pt; font-family:\">In the case of EventToCommand the problem is in the fact that &quot;the Command holds on\r\n<br>\r\nto the EventToCommand&quot; when it shouldn't.</span></p>\r\n<p><span style=\"font-size:9.0pt; font-family:\">That connection is the right one to be solved and made weak with a WeakEventListener.</span></p>\r\n<p><span style=\"font-size:9.0pt; font-family:\">So to recap : </span></p>\r\n<p><span style=\"font-size:9.0pt; font-family:\">- Commands are meant to reference strongly their ViewModel.<br>\r\n- Command should not reference elements strongly when there is a reason.Its the responsibility of<br>\r\nthe user of the Command (and not the Command itself) to know that reason and provide an ad-hoc\r\n<br>\r\nsolution like WeakEventListener (see EventToCommand)<br>\r\n- Command callbacks should be instance private if they want! </span></p>\r\n<p><span style=\"font-size:9.0pt; font-family:\"></span></p>\r\n<p><span style=\"font-size:9.0pt; font-family:\">Looking forward to your thoughts on this.</span></p>\r\n<p><span style=\"font-size:9.0pt; font-family:\"></span></p>\r\n<p><span style=\"font-size:9.0pt; font-family:\">Thanx<br>\r\n<br>\r\nI have blogged about the issue </span><a href=\"http://atomaras.wordpress.com/2012/04/23/solving-mvvmlights-eventtocommand-memory-leak-wp7/\" target=\"_blank\" title=\"Solving MvvmLight’s EventToCommand Memory Leak (WP7)\"><span style=\"font-size:9.0pt; font-family:\">here</span></a><span style=\"font-size:9.0pt; font-family:\"></span></p>\r\n</div>\r\n</div>\r\n",
    "PostedDate": "2012-04-29T04:01:44.81-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1103532",
    "ThreadId": "353774",
    "Html": "Hi, Laurent\r<br />\nI noted, now there's 4.1.27 in Nuget. \r<br />\nIs this issue with memory leaks solved already? <br />\n",
    "PostedDate": "2013-10-04T01:33:35.77-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]
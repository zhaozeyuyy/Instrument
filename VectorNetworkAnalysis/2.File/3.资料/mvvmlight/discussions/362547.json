[
  {
    "Id": "859226",
    "ThreadId": "362547",
    "Html": "\r\n<p>Hi guys!</p>\r\n<p>I've started to use MVVM Light Toolkit for Silverlight and faced with a major issue. It really bothers me because it's obvious problem from my perspective but I&nbsp;&nbsp;I didn't find any solution yet.</p>\r\n<p>&nbsp;</p>\r\n<p>Before I start using MVVM Light Toolkit, I used my own ViewModelBase class &#43; RelayCommand and so on.</p>\r\n<p>In order to raise CanExecuteChanged event automatically (smth like in WPF) I created static CommandBindingManager&nbsp;class. It does following work:</p>\r\n<p>1) Every time RelayCommand created, in the constructor of&nbsp;RelayCommand&nbsp;CommandBindingManager.Register(RelayCommand command) is called.</p>\r\n<p>As a result, all commands created in the app, store in the CommandBindingManager</p>\r\n<p>2)In ViewModelBase.RaisePropertyChanged() method I called&nbsp;CommandBindingManager.UpdateCanExecute().</p>\r\n<p>What this method does is call RaiseCanExecute() method on every command that&nbsp;CommandBindingManager stores(on every command in the application)</p>\r\n<p>&nbsp;</p>\r\n<p>As a result, if smth is changed in the application -&gt; all commands CanExecute properties are updated too.</p>\r\n<p>&nbsp;</p>\r\n<p>Now, I'm using RelayCommand and ViewModelBase from MVVM Light Toolkit. And wondering how you handle CanExecute issue?</p>\r\n<p>&nbsp;</p>\r\n<p>Because in real applications situations &nbsp;happen like this:</p>\r\n<p>&nbsp;</p>\r\n<pre><div style=\"color:black; background-color:white\">GetDataCommand = <span style=\"color:blue\">new</span> RelayCommand(GetData, () =&gt; SelectedAccounts != <span style=\"color:blue\">null</span> &amp;&amp; SelectedAccounts.Any() &amp;&amp; SelectedAccounts.All(entity =&gt; entity.Id != Guid.Empty) &amp;&amp; SelectedDisplayMode != Mode.None &amp;&amp; SelectedPhase != <span style=\"color:blue\">null</span>);\n</div></pre>\r\n<p>In this case RaiseCanExecute() should be called several times in different properties. It's dublication of code.</p>\r\n<p>What if else one condition will be added to CanExecute and developer forget to add GetDataCommand.RaiseCanExecute() call &nbsp;to this new property?</p>\r\n<p>&nbsp;</p>\r\n<p>or like this:</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre>UndoCommand = <span style=\"color:blue\">new</span> RelayCommand(ManagersHolder.UndoRedoManager.Undo, () =&gt; ManagersHolder.UndoRedoManager.CanUndo);\n</pre>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p>In this case the class where CanUndo method placed even don't know anything about UndoCommand and can't call RaiseCanExecute() method</p>\r\n",
    "PostedDate": "2012-07-09T08:40:22.037-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]
[
  {
    "Id": "918516",
    "ThreadId": "397175",
    "Html": "\r\n<p>Hi</p>\r\n<p>&nbsp;</p>\r\n<p>I've been looking at using the framwork and have been trying out your clean shutdown example, I modified the shutdown service (to make it more readable to me).<br>\r\n</p>\r\n<pre></pre>\r\n<div style=\"color:black; background-color:white\">\r\n<pre>        <span style=\"color:blue\">public</span> <span style=\"color:blue\">static</span> <span style=\"color:blue\">void</span> RequestShutdown()\r\n        {\r\n\r\n\r\n            NotificationMessageAction act = <span style=\"color:blue\">new</span> NotificationMessageAction(\r\n                                       Notifications.ConfirmShutdown,\r\n                                       (param) =&gt; ShouldAbortShutdown(param));\r\n            IMessenger messenger = Messenger.Default;\r\n            messenger.Send(act);\r\n\r\n            <span style=\"color:blue\">if</span> (!_shouldAbortShutdown)\r\n            {\r\n                <span style=\"color:green\">// This time it is for real</span>\r\n                Messenger.Default.Send(<span style=\"color:blue\">new</span> NotificationMessage(Notifications.NotifyShutdown));\r\n\r\n                Application.Current.Shutdown();\r\n            }\r\n        }\r\n\r\n        \r\n        <span style=\"color:blue\">static</span> <span style=\"color:blue\">public</span> <span style=\"color:blue\">void</span> ShouldAbortShutdown(<span style=\"color:blue\">bool</span> abort)\r\n        {\r\n            _shouldAbortShutdown = abort;\r\n        }\r\n</pre>\r\n</div>\r\nI then started to get an exception (Non-static method requires a target.) in the Execute(T parameter) in the weakactoinGeneric class where the ActionTarget is null in the method.execute(...)\r\n<p></p>\r\n<p>Now I think I have resolved this by modifying the execute to be as follows:</p>\r\n<p>&nbsp; </p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:blue\">public</span> <span style=\"color:blue\">void</span> Execute(T parameter)\r\n        {\r\n            <span style=\"color:blue\">if</span> (_staticAction != <span style=\"color:blue\">null</span>)\r\n            {\r\n                _staticAction(parameter);\r\n                <span style=\"color:blue\">return</span>;\r\n            }\r\n            <span style=\"color:blue\">var</span> actionTarget = ActionTarget;\r\n\r\n            <span style=\"color:blue\">if</span> (IsAlive)\r\n            {\r\n                <span style=\"color:blue\">if</span> (Method != <span style=\"color:blue\">null</span>\r\n                    &amp;&amp; ActionReference != <span style=\"color:blue\">null</span>\r\n                    &amp;&amp; actionTarget != <span style=\"color:blue\">null</span>)\r\n                {\r\n                    Method.Invoke(\r\n                        ActionTarget,\r\n                        <span style=\"color:blue\">new</span> <span style=\"color:blue\">object</span>[]\r\n                        {\r\n                            parameter\r\n                        });\r\n                }\r\n</pre>\r\n</div>\r\n<p></p>\r\n<p>This appears to solve the problem and is similar to what happens in the weakaction class. Not being an expert I'm gussing that the re-referenceing the actionTarget makes it a strong reference again? Please could you also explain why the use of weak references\r\n here as I don't see the need? Thanks</p>\r\n",
    "PostedDate": "2012-09-27T08:06:48.423-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]
[
  {
    "Id": "948738",
    "ThreadId": "404968",
    "Html": "\r\n<p>First let me say thank you for creating this project. We've been using MVVM Light for quite some time now and absolutely love it. It's become a core piece of our infrastructure and we continue to use it regularly on all of our projects we create.</p>\r\n<p>That being said, early on we noticed that managing when an application is busy is quite difficult within Silverlight when you have multiple threads pulling data simultaneously. After thinking about this problem for quite some time, I came up with a class\r\n which uses your framework to assist with managing this problem area. I've re-written this class so many times now as I transition to other projects, I have a feeling many other people might find great use for it. So, I am posting it here for your consideration\r\n to include it in your project.</p>\r\n<p>Basically, this class' role is to handle busy state changes within a multi-threaded application as pieces are started and stopped. For example:</p>\r\n<p>Say you have a view model which has to retrieve 3 separate pieces of data in a Silverlight based application using RIA services. In order to decrease load time, you&nbsp;perform the 3 load operations of the data concurrently.&nbsp;If you have some sort of\r\n busy indicator on your page while the data is being retrieved, you need to know when to start and when to stop that indicator. With multiple threads retrieving the data concurrently, having a class that acts as a controller for when each thread starts and\r\n stops is highly useful. Without it, your application may transition between states when one thread finishes before the 2nd thread finishes being started usually causing a flash on the screen. This area is exactly what this class is designed to help manage\r\n by providing a thread-safe mechanism for managing this.</p>\r\n<p><strong>XAML:</strong></p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre>&lt;Page.Resources&gt;\r\n  &lt;helpers:BusyController x:Key=<span style=\"color:#a31515\">&quot;BusyController&quot;</span>/&gt;\r\n&lt;/Page.Resources.\r\n\r\n&lt;BusyIndicator IsBusy=<span style=\"color:#a31515\">&quot;{Binding Default.IsBusy, Mode=OneWay, Source={StaticResource BusyController}&quot;</span>/&gt;\r\n</pre>\r\n</div>\r\n<p>In the above example, you have a BusyController instance&nbsp;defined in the page resources, and you can either use the default instance for controlling application-wide busy state, or bind to the IsBusy property on an instance of the BusyController if you\r\n are wanting to control the busy state on a specific control. This example uses a Silverlight Toolkit BusyIndicator control to display a visual indicator that the application is busy doing something.</p>\r\n<p><strong>Usage:</strong>&nbsp;</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:blue\">public</span> <span style=\"color:blue\">void</span> LoadData()\r\n{\r\n    BusyController.Default.SendMessage(<span style=\"color:blue\">true</span>);\r\n\r\n    EntityQuery&lt;MyEntity&gt; query = <span style=\"color:blue\">this</span>.DomainContext.GetMyEntityQuery();\r\n    <span style=\"color:blue\">this</span>.DomainContext.Load(query, <span style=\"color:blue\">this</span>.LoadDataCompleted, <span style=\"color:blue\">null</span>);\r\n}\r\n\r\n<span style=\"color:blue\">private</span> <span style=\"color:blue\">void</span> LoadDataCompleted(LoadOperation&lt;MyEntity&gt; op)\r\n{\r\n    BusyController.Default.SendMessage(<span style=\"color:blue\">false</span>);\r\n}</pre>\r\n</div>\r\n<p>Basically, before each thread begins whatever asynchronous work must be performed, a quick call to the busy controller indicating that the busy state is being changed. And once the operation completes, another call to indicate that the work has finished.</p>\r\n<p>Also, if your application needs to know when the busy state of a controller changes, using the normal registration mechanism for the messenger instance can be used to receive notifications.</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre>Messenger.Default.Register&lt;BusyMessage&gt;(<span style=\"color:blue\">this</span>, (message) =&gt;\r\n    {\r\n        <span style=\"color:green\">// Do something useful.</span>\r\n    });\r\n</pre>\r\n</div>\r\n<p><strong>The Code:</strong></p>\r\n<p>Rather than posting all of the code here for the class and related message, I'm going to upload it to pastebin. Here is the link:\r\n<a href=\"http://pastebin.com/qqZ14SDm\">http://pastebin.com/qqZ14SDm</a><a href=\"http://pastebin.com/nTG3d3bg\"></a></p>\r\n<p>I hope this post helps someone else, and I hope&nbsp;I see it included with MVVM Light at some point in the future!</p>\r\n<p>- Jeff</p>\r\n<p>Edit: I wanted to add, this class has been used in Windows Phone 7 and 8, WPF, and both Silverlight 4 and 5&nbsp;applications.</p>\r\n",
    "PostedDate": "2012-11-28T20:36:03.853-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "948786",
    "ThreadId": "404968",
    "Html": "\r\n<p>Hi,</p>\r\n<p>It's not the first time I got a request to add a &quot;IsBusy&quot; handling to MVVM Light. I have not done it so far because I was thinking it is already too specific. Personally I handle IsBusy differently: In every framework I work in, I have a &quot;PleaseWaitControl&quot;\r\n and a ViewModelBaseEx with specific features. For instance in WP8 and Win8, which are navigation frameworks with pages, ViewModelBaseEx has additional features around navigation. The &quot;Busy&quot; feature is into ViewModelBaseEx. I also have a PageBase class which\r\n does a lot of thing automatically, such as setting the busy state, saving its own navigation state, etc.&nbsp;</p>\r\n<p>In summary, my approach has been to extend MVVM Light with framework specific features in a &quot;Utils&quot; assembly. I have one for Silverlight, one for WPF, one for Windows Phone, one for Windows 8, etc. Sometimes I feel that a feature from my Utils is unified\r\n enough to be placed into MVVM Light &quot;core&quot;. Maybe the Busy state handling is at this point, I will need to think about it.</p>\r\n<p>Cheers and thanks for the feedback.</p>\r\n<p>Laurent</p>\r\n",
    "PostedDate": "2012-11-29T00:08:33.787-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "949310",
    "ThreadId": "404968",
    "Html": "\r\n<p>You are correct in thinking that it can be specific, each developer finds their own way to make it work because there is no standard for managing busy state of an application. If you're not careful with what you build, like extending the view model base\r\n to support busy state functionality at the view model, you might end up not being able to handle scenarios that need busy management that aren't view specific.</p>\r\n<p>That's why the BusyController class isn't responsible for anything other than tracking the number of threads that are currently in use, and sending a notification via the IsBusy property change and a message when that state changes. If your situation requires\r\n you to have a control handling busy state independently of the view (for example downloading an image and wanting a busy indicator wrapping the image control while it downloads), tossing an instance of the BusyController on the control class allows you to\r\n manage busy state on that control independently of the view.</p>\r\n<p><strong>Control XAML:</strong></p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">UserControl x:Class=&quot;MyApp.MyControl&quot;</span><span style=\"color:blue\">&gt;</span>\r\n    <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">UserControl.Resources</span><span style=\"color:blue\">&gt;</span>\r\n        <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">helpers</span><span style=\"color:blue\">:</span><span style=\"color:#a31515\">BusyController</span> <span style=\"color:red\">x:Key</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">BusyController</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">/&gt;</span>\r\n    <span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">UserControl.Resources</span><span style=\"color:blue\">&gt;</span>\r\n\r\n    <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">BusyIndicator</span> <span style=\"color:red\">IsBusy</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">{Binding IsBusy, Mode=OneWay, Source={StaticResource BusyController}}</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">&gt;</span>\r\n        <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">Image</span> <span style=\"color:red\">Source</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">{Binding ImageSource, Mode=OneWay}</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">/&gt;</span>\r\n    <span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">BusyIndicator</span><span style=\"color:blue\">&gt;</span>\r\n<span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">UserControl</span><span style=\"color:blue\">&gt;</span>\r\n</pre>\r\n</div>\r\n<p><strong>Code:</strong></p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:blue\">public</span> <span style=\"color:blue\">class</span> MyControl : UserControl\r\n{\r\n    <span style=\"color:blue\">public</span> MyControl()\r\n    {\r\n        <span style=\"color:blue\">this</span>.InitializeComponent();\r\n\r\n        <span style=\"color:blue\">this</span>.BusyController = (BusyController)<span style=\"color:blue\">this</span>.Resources[<span style=\"color:#a31515\">&quot;BusyController&quot;</span>];\r\n        <span style=\"color:blue\">this</span>.client = <span style=\"color:blue\">new</span> WebClient();\r\n        <span style=\"color:blue\">this</span>.client.OpenReadCompleted &#43;= <span style=\"color:blue\">this</span>.client_OpenReadCompleted;\r\n    }\r\n\r\n    <span style=\"color:blue\">private</span> WebClient client;\r\n\r\n    <span style=\"color:blue\">public</span> <span style=\"color:blue\">void</span> LoadImage()\r\n    {\r\n        <span style=\"color:blue\">this</span>.BusyController.SendMessage(<span style=\"color:blue\">true</span>);\r\n\r\n        <span style=\"color:blue\">this</span>.client.OpenReadAsync(<span style=\"color:blue\">new</span> Uri(<span style=\"color:#a31515\">&quot;http://localhost/SomeHugeImage.png&quot;</span>));\r\n    }\r\n\r\n    <span style=\"color:blue\">private</span> <span style=\"color:blue\">void</span> client_OpenReadCompleted(<span style=\"color:blue\">object</span> sender, System.Net.OpenReadCompletedEventArgs e)\r\n    {\r\n        <span style=\"color:blue\">using</span> (BinaryReader reader = <span style=\"color:blue\">new</span> BinaryReader(e.Result))\r\n        {\r\n            <span style=\"color:blue\">byte</span>[] data = reader.ReadBytes(<span style=\"color:blue\">int</span>.MaxValue);\r\n        }\r\n       \r\n        <span style=\"color:blue\">this</span>.BusyController.SendMessage(<span style=\"color:blue\">false</span>);\r\n    }\r\n}\r\n</pre>\r\n</div>\r\n<p><strong>View XAML:</strong><strong>&nbsp;</strong></p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">Page</span> <span style=\"color:red\">x:Class</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">MyApp.MyPage</span><span style=\"color:black\">&quot;</span> <span style=\"color:red\">xmlns:local</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">using:MyApp</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">&gt;</span>\r\n    <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">Grid</span> <span style=\"color:red\">x:Name</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">LayoutRoot</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">&gt;</span>\r\n        <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">Grid.ColumnDefinitions</span><span style=\"color:blue\">&gt;</span>\r\n            <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">ColumnDefinition</span> <span style=\"color:red\">Width</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">Auto</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">/&gt;</span>\r\n            <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">ColumnDefinition</span> <span style=\"color:red\">Width</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">Auto</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">/&gt;</span>\r\n        <span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">Grid.ColumnDefinitions</span><span style=\"color:blue\">&gt;</span>\r\n\r\n        <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">local</span><span style=\"color:blue\">:</span><span style=\"color:#a31515\">MyControl</span> <span style=\"color:red\">Grid.Column</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">0</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">/&gt;</span>\r\n        <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">local</span><span style=\"color:blue\">:</span><span style=\"color:#a31515\">MyControl</span> <span style=\"color:red\">Grid.Column</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">1</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">/&gt;</span>\r\n    <span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">Grid</span><span style=\"color:blue\">&gt;</span>\r\n<span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">Page</span><span style=\"color:blue\">&gt;</span>&nbsp;</pre>\r\n</div>\r\n<p>It keeps you able to use the class in situations that aren't specific to only allowing busy state management on a view. If whatever ends up being&nbsp;built or put into the MVVM Light &quot;core&quot; is too specific, there will undoubtedly be occasions arise where\r\n it cannot be used. I had a situation earlier where I needed to be able to manage the busy state of a behavior to ensure it didn't do something while it was already busy doing something else. Granted, it would have been just as easy to add thread synchronization\r\n objects to the behavior, but instead I just tossed the busy controller on the instance to let that manage it.</p>\r\n<p>As long as whatever is baked into the MVVM Light &quot;core&quot; doesn't require an artificially imposed construct like a view to make use of it, I think it could be highly used amongst people that use this wonderful framework you've given us.</p>\r\n<p>Thanks for taking the time to read my feedback!</p>\r\n<p>- Jeff</p>\r\n",
    "PostedDate": "2012-11-29T18:00:40.273-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]
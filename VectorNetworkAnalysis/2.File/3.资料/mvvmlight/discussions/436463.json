[
  {
    "Id": "1014576",
    "ThreadId": "436463",
    "Html": "I've looked at many of the  lbugnion's samples and videos and i am quite confused with the MVVM concept.  Here are my following confusions\r<br />\n<br />\n1.) If we are dealing about separation of concerns, shouldn't the model class be as poco as possible?  This will allow easy portability between multiple projects even if they don't make use of the MVVM design pattern( since it's isn't really viable in other types of projects)\r<br />\n<br />\nexamples: \r<br />\nShould model really implement inotifypropertychanged or should the view model wrap it?\r<br />\n<br />\n<br />\n2.) Are the viewmodels meant to be portable across MVVM applications like the models?  Should i strive to create viewmodels with portability so i can use them in other applications using MVVM?\r<br />\n<br />\n3.) I see many examples online implement IDataErrorInfo within the model class and some implement it within the view model.  Is there a preferred way?\r<br />\n<br />\nIf you implement it within the view model, then you keep your models poco.<br />\nOn the other hand, \r<br />\nif you implement it in the model, then business logic follows the class around into projects wanting to use the models!\r<br />\n<br />\nSummary: all in all my confusion is on whether i should do the following\r<br />\n1.) Should i Strive to make models poco as possible\r<br />\n2.) Should i strive to make view models as portable as possible<br />\n",
    "PostedDate": "2013-03-13T06:28:32.77-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1014674",
    "ThreadId": "436463",
    "Html": "Hi,\r<br />\n<br />\nThese are some good questions.\r<br />\n<br />\nTo 1:\r<br />\nIn the beginning I was wrapping all my model objects in VMs. However in time, I noticed how much work that is. After talking to a few people in the industry, I changed my mind and rather (where possible) implement INPC on the Model object. Consider this:<br />\n<ul>\n<li>INPC does not change the model object in a big way. The model object is still serializable.</li>\n<li>\nSome other frameworks that create data objects automatically already have them implement INPC (think of Entity Framework or WCF). The proxy that these frameworks create have INPC already implemented. \r<br />\nBecause of these considerations, and because it is really much easier than wrapping every single model object, I think that implementing INPC on the model object is acceptable.<br />\n</li>\n</ul>\nTo 2: \r<br />\nYes and no. If you have the same app running on Windows 8 and Windows Phone, for instance, then sharing the VMs is probably a good idea. If however you have two completely different apps that use the same Model, the chances are big that the ViewModels will be quite different between the two apps. So in that case it might not make sense to share the VMs. Itâ€™s really a case-by-case call that I make.\r<br />\n<br />\nTo 3:\r<br />\nI think that if you can, it is better to implement it on the Model, as validation is something that should be done quite low in the layers. But I can imagine some cases where it makes more sense on the VM layer. \r<br />\n<br />\nCheers\r<br />\nLaurent<br />\n",
    "PostedDate": "2013-03-13T09:04:05.67-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1014917",
    "ThreadId": "436463",
    "Html": "First off let me thank you personally for responding to my post so fast.<br />\nAlso, thank you for the information as this was definitely the information i was looking for! \r<br />\n<br />\nHope your week has been good and hope to see you in the future!<br />\n",
    "PostedDate": "2013-03-13T16:59:45.933-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1448763",
    "ThreadId": "436463",
    "Html": "<strong>lbugnion wrote:</strong><br />\n<blockquote>\nHi,<br />\n<br />\nThese are some good questions.<br />\n<br />\nTo 1:<br />\nIn the beginning I was wrapping all my model objects in VMs. However in time, I noticed how much work that is. After talking to a few people in the industry, I changed my mind and rather (where possible) implement INPC on the Model object. Consider this:<br />\n<ul>\n<li>INPC does not change the model object in a big way. The model object is still serializable.</li>\n<li>\nSome other frameworks that create data objects automatically already have them implement INPC (think of Entity Framework or WCF). The proxy that these frameworks create have INPC already implemented. <br />\nBecause of these considerations, and because it is really much easier than wrapping every single model object, I think that implementing INPC on the model object is acceptable.<br />\n</li>\n</ul>\n</blockquote>\nAlong this same line, for Entity Framework Code First, should I be deriving all of my POCO classes used in EF from ObservableObject? \r<br />\n<br />\nFrom what the original developer told me is that while the Local property of the DbSet collection might already implement INPC, it appears that it doesn't register a property changed event on the entire collection if one of the objects in the collection is modified, which we need to know in the app. So he believes that each POCO needs to derive from ObservalbeObject. Do you agree?<br />\n",
    "PostedDate": "2015-10-15T21:13:27.953-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]
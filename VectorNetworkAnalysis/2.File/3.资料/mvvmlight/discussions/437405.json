[
  {
    "Id": "1018506",
    "ThreadId": "437405",
    "Html": "I am using MVVM Light, Sql Server Compact Toolkit and windows phone 7.\r<br />\n<br />\nI created a sql server compact 3.5 database and then used the toolkit to generate the datacontext and domain class for each table.\r<br />\n<br />\nLooks like this<br />\n<pre><code>\n    [global::System.Data.Linq.Mapping.TableAttribute(Name = &quot;ContactGroups&quot;)]\n        public partial class ContactGroup : INotifyPropertyChanging, INotifyPropertyChanged\n        {\n    \n            private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);\n    \n            private int _Id;\n    \n            private string _Title;\n    \n            private System.DateTime _LastUpdated;\n    \n            private EntitySet&lt;GContact&gt; _GContacts;\n    \n            #region Extensibility Method Definitions\n            partial void OnLoaded();\n            partial void OnValidate(System.Data.Linq.ChangeAction action);\n            partial void OnCreated();\n            partial void OnIdChanging(int value);\n            partial void OnIdChanged();\n            partial void OnTitleChanging(string value);\n            partial void OnTitleChanged();\n            partial void OnLastUpdatedChanging(System.DateTime value);\n            partial void OnLastUpdatedChanged();\n            #endregion\n    \n            public ContactGroup()\n            {\n                this._GContacts = new EntitySet&lt;GContact&gt;(new Action&lt;GContact&gt;(this.attach_GContacts), new Action&lt;GContact&gt;(this.detach_GContacts));\n                OnCreated();\n            }\n    \n            [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = &quot;_Id&quot;, DbType = &quot;Int NOT NULL&quot;, IsPrimaryKey = true)]\n            public int Id\n            {\n                get\n                {\n                    return this._Id;\n                }\n                set\n                {\n                    if ((this._Id != value))\n                    {\n                        this.OnIdChanging(value);\n                        this.SendPropertyChanging();\n                        this._Id = value;\n                        this.SendPropertyChanged(&quot;Id&quot;);\n                        this.OnIdChanged();\n                    }\n                }\n            }\n    \n            [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = &quot;_Title&quot;, DbType = &quot;NVarChar(100) NOT NULL&quot;, CanBeNull = false)]\n            public string Title\n            {\n                get\n                {\n                    return this._Title;\n                }\n                set\n                {\n                    if ((this._Title != value))\n                    {\n                        this.OnTitleChanging(value);\n                        this.SendPropertyChanging();\n                        this._Title = value;\n                        this.SendPropertyChanged(&quot;Title&quot;);\n                        this.OnTitleChanged();\n                    }\n                }\n            }\n    \n            [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = &quot;_LastUpdated&quot;, DbType = &quot;DateTime NOT NULL&quot;)]\n            public System.DateTime LastUpdated\n            {\n                get\n                {\n                    return this._LastUpdated;\n                }\n                set\n                {\n                    if ((this._LastUpdated != value))\n                    {\n                        this.OnLastUpdatedChanging(value);\n                        this.SendPropertyChanging();\n                        this._LastUpdated = value;\n                        this.SendPropertyChanged(&quot;LastUpdated&quot;);\n                        this.OnLastUpdatedChanged();\n                    }\n                }\n            }\n    \n            [global::System.Data.Linq.Mapping.AssociationAttribute(Name = &quot;FK_GContacts_ContactGroups&quot;, Storage = &quot;_GContacts&quot;, ThisKey = &quot;Id&quot;, OtherKey = &quot;ContactGroups_Id&quot;, DeleteRule = &quot;NO ACTION&quot;)]\n            public EntitySet&lt;GContact&gt; GContacts\n            {\n                get\n                {\n                    return this._GContacts;\n                }\n                set\n                {\n                    this._GContacts.Assign(value);\n                }\n            }\n    \n            public event PropertyChangingEventHandler PropertyChanging;\n    \n            public event PropertyChangedEventHandler PropertyChanged;\n    \n            protected virtual void SendPropertyChanging()\n            {\n                if ((this.PropertyChanging != null))\n                {\n                    this.PropertyChanging(this, emptyChangingEventArgs);\n                }\n            }\n    \n            protected virtual void SendPropertyChanged(String propertyName)\n            {\n                if ((this.PropertyChanged != null))\n                {\n                    this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));\n                }\n            }\n    \n            private void attach_GContacts(GContact entity)\n            {\n                this.SendPropertyChanging();\n                entity.ContactGroup = this;\n            }\n    \n            private void detach_GContacts(GContact entity)\n            {\n                this.SendPropertyChanging();\n                entity.ContactGroup = null;\n            }\n        }</code></pre>\n\nYet when I try to make it blendable(ie make fake data so when I go into blend I can work with it better instead of looking at empty boxes) nothing shows up in blend\r<br />\n<br />\nwhen I have a simple domain without it works<br />\n<pre><code>      public class ContactGroup\n        {\n            public int Id { get; set; }\n    \n            public string Title { get; set; }\n    \n            public DateTime LastUpdated { get; set; }\n    \n            public List&lt;GContacts&gt; Contacts { get; set; }\n    \n            public ContactGroup()\n            {\n                Contacts = new List&lt;GContacts&gt;();\n            }\n    \n        }</code></pre>\n\nThen in my viewmodel locator I would have<br />\n<pre><code>\n\n        if (ViewModelBase.IsInDesignModeStatic)\n        {\n            SimpleIoc.Default.Register&lt;IContactService, DesignContactService&gt;();\n        }\n        else\n        {\n            SimpleIoc.Default.Register&lt;IContactService, DesignContactService&gt;();\n        }\n</code></pre>\n\n",
    "PostedDate": "2013-03-20T13:17:02.33-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1018534",
    "ThreadId": "437405",
    "Html": "The problem line seems to be <br />\n<pre><code>\n       private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);</code></pre>\n\nIf I comment it out I get blendablity back. But not sure what to do with this line.<br />\n",
    "PostedDate": "2013-03-20T13:53:38.57-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1029473",
    "ThreadId": "437405",
    "Html": "chobo2, did you get this issue solved? \r<br />\nI too am facing the same issue and I have not found an answer yet<br />\n",
    "PostedDate": "2013-04-12T03:40:46.85-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]
[
  {
    "Id": "1034123",
    "ThreadId": "441194",
    "Html": "Laurent tweeted me his Belgium / Netherlands Tech days videos and source code. \r<br />\nHttp://geekswithblogs.net/lbugnion/archive/2013/03/10/session-material-from-techdays-be-and-nl.aspx\r<br />\n<br />\nAfter watching and studying for a week I have attempted to implements a Service in windows 8 /  wp7 with much success. I'm able to Command bind to a Button in a Portable class library view model and say &quot;hi from win8 service&quot; and &quot;hi from wp7 service&quot; respectively. <strong>This is very cool.</strong>\r<br />\n<br />\nI'm using NuGet version 2.2.40116.9051\r<br />\nI have Resharper disabled\r<br />\nNotable nuGet packages\r<br />\nMS BCL Build Components 1.0.4\r<br />\nMVVM Light libraries only (PCL) 4.1.27.4\r<br />\nBCL Portability Pack for .NET framework 1.0.19\r<br />\n<br />\nIn a synchronous manner I'm able to populate the view model with an ObservableCollection&lt;T&gt; \r<br />\n<br />\nI would like to find an example of using an ObservableCollection&lt;T&gt; bound to a view model that is populated with async from a service.\r<br />\n<br />\nAs I attempt to implement this as async I'm running into error messages such as:\r<br />\n<br />\nError\t2\tCannot await 'System.Threading.Tasks.Task&lt;System.Collections.ObjectModel.ObservableCollection&lt;RightWeight.Pcl.Model.WeightRecord&gt;&gt;'\tC:\\Users\\Jeff\\Documents\\Visual Studio 2012\\Projects\\RightWeight\\RightWeight.Pcl\\ViewModel\\MainViewModel.cs\t51\t23\tRightWeight.Pcl\r<br />\n<br />\nError\t3\tCannot implicitly convert type 'System.Threading.Tasks.Task&lt;System.Collections.ObjectModel.ObservableCollection&lt;RightWeight.Pcl.Model.WeightRecord&gt;&gt;' to 'System.Collections.ObjectModel.ObservableCollection&lt;RightWeight.Pcl.Model.WeightRecord&gt;'\tC:\\Users\\Jeff\\Documents\\Visual Studio 2012\\Projects\\RightWeight\\RightWeight.Pcl\\ViewModel\\MainViewModel.cs\t51\t23\tRightWeight.Pcl\r<br />\n<br />\nin the PCL viewModel ctor\r<br />\nLoadData()<br />\n<pre><code>        public async Task LoadData()\n        {\n            // Works\n            Weights = _weightService.GetWeights();\n            // doesn't work\n            Weights = await _weightService.GetWeightsAsync();\n            Weights = _weightService.GetWeightsAsync(); \n        }</code></pre>\n\nPcl IWeightService<br />\n<pre><code>namespace RightWeight.Pcl.Service\n{\n    public interface IWeightService\n    {\n        void SayPlatformFromService();\n        ObservableCollection&lt;WeightRecord&gt; GetWeights();\n        Task&lt;ObservableCollection&lt;WeightRecord&gt;&gt; GetWeightsAsync();\n        void AddWeight(WeightRecord rec);\n    }\n}</code></pre>\n\nwin8 service<br />\n<pre><code>namespace RightWeight.Service\n{\n    public class WeightService : IWeightService\n    {\n        private static Utility _utility;\n        private ObservableCollection&lt;WeightRecord&gt; _weights; //  = new ObservableCollection&lt;WeightRecord&gt;();\n\n        public WeightService()\n        {\n            _utility = new Utility(); \n            _weights = new ObservableCollection&lt;WeightRecord&gt;();\n            LoadData(); \n        }\n\n        private async void LoadData()\n        {\n            _weights = await LoadFromLocalFile(); \n        }\n\n        public void SayPlatformFromService()\n        {\n            Debug.WriteLine(&quot;\\nFrom Win8 WeightService\\n&quot;);\n        }\n\n        public ObservableCollection&lt;WeightRecord&gt; GetWeights()\n        {\n           return _weights; \n        }\n\n        public Task&lt;ObservableCollection&lt;WeightRecord&gt;&gt; GetWeightsAsync()\n        {\n            // var blat = LoadFromLocalFile(); \n            // return Task.Run(() =&gt; blat);\n            // return Task.Run(() =&gt; LoadFromLocalFile());\n            return Task.Run(() =&gt; LoadFromLocalFile());\n            //var blat = _weights;\n            //return Task.Run(() =&gt; blat ());\n        }\n\n        public async void AddWeight(WeightRecord rec)\n        {\n            _weights.Add(rec);\n            await PersistLocalWeightsToJsonStatic(_weights); \n        }\n\n        public async Task&lt;ObservableCollection&lt;WeightRecord&gt;&gt; LoadFromLocalFile()\n        {\n            var localFolder = ApplicationData.Current.LocalFolder;\n            StorageFile localFileName = await localFolder.GetFileAsync(Constants.FileName);\n            // String lsf = await FileIO.ReadTextAsync(localSoundsFileName);\n            String localFile = await FileIO.ReadTextAsync(localFileName);\n            return _utility.Deserialize&lt;ObservableCollection&lt;WeightRecord&gt;&gt;(localFile);\n        }\n\n        public static async Task PersistLocalWeightsToJsonStatic(object toPersist)\n        {\n            var localFolder = ApplicationData.Current.LocalFolder;\n            var localWeightsFile = await localFolder.CreateFileAsync(Constants.FileName, CreationCollisionOption.ReplaceExisting);\n            await FileIO.WriteTextAsync(localWeightsFile, _utility.Serialize(toPersist));\n        }\n\n        public async Task&lt;IList&lt;WeightRecord&gt;&gt; GetWeightsListAsync()\n        {\n            var localFolder = Windows.Storage.ApplicationData.Current.LocalFolder;\n            StorageFile localFileName = await localFolder.GetFileAsync(Constants.FileName);\n            // String lsf = await FileIO.ReadTextAsync(localSoundsFileName);\n            String localFile = await FileIO.ReadTextAsync(localFileName);\n            return _utility.Deserialize&lt;List&lt;WeightRecord&gt;&gt;(localFile);\n        }\n    }\n}</code></pre>\n\nI hesitate to mention the following as I think it's an anomaly from intelisense on a syntax error however as is typical with most questions I ask during the composition of this discussion I saw an error while checking a syntax error that I had not encountered over the last week or more of working with this code: It could be a culprit <em>note</em> that I am not working on the async in the windows phone code yet just win8. I seem to have some problem with the BCL RTM that's for later. \r<br />\nI saw this while working on a syntax in a lambda Task.Run return Task.Run(() =&gt; blat ());<br />\n<pre><code>Ambigous invocation:\nSystem.ThreadingTasks.Task Run(System.Action)(in class Task)\nSystem.Threading.Tasks.Task Run(System.Func&lt;&lt;System.Threading.Tasks.Task&gt;)&lt;in class Task)\nmatch</code></pre>\n\n",
    "PostedDate": "2013-04-22T12:31:11.55-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1034158",
    "ThreadId": "441194",
    "Html": "Hey Jeff,\r<br />\n<br />\nThe error &quot;Cannot implicitly convert type 'System.Threading.Tasks.Task&lt;System.Collections.ObjectModel.ObservableCollection&lt;RightWeight.Pcl.Model.WeightRecord&gt;&gt;' to 'System.Collections.ObjectModel.ObservableCollection&lt;RightWeight.Pcl.Model.WeightRecord&gt;&quot; means that somewhere you forgot an &quot;await&quot; keyword. \r<br />\n<br />\n&quot;await&quot; is what &quot;converts&quot; a Task&lt;Something&gt; into a Something instance. \r<br />\n<br />\nHope this helps,\r<br />\nLaurent<br />\n",
    "PostedDate": "2013-04-22T13:53:41.663-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1034173",
    "ThreadId": "441194",
    "Html": "Right. I've used it like that before in a non PCL project. In this project when I add the await I'm told it's not awaitable. Wondering if there is some .dll Task confusion?<br />\n<pre><code>        public async Task&lt;ObservableCollection&lt;WeightRecord&gt;&gt; GetWeightsAsync()\n        {\n            return await LoadFromLocalFile();\n        }\n\n        public async Task&lt;ObservableCollection&lt;WeightRecord&gt;&gt; LoadFromLocalFile()\n        {\n            var localFolder = ApplicationData.Current.LocalFolder;\n            StorageFile localFileName = await localFolder.GetFileAsync(Constants.FileName);\n            // String lsf = await FileIO.ReadTextAsync(localSoundsFileName);\n            String localFile = await FileIO.ReadTextAsync(localFileName);\n            return _utility.Deserialize&lt;ObservableCollection&lt;WeightRecord&gt;&gt;(localFile);\n        }</code></pre>\n\nin the LoadData() called from the ViewModel<br />\n<pre><code>        public async Task LoadData()\n        {\n            // Works\n            Weights = _weightService.GetWeights();\n            // doesn't work\n            Weights = await _weightService.GetWeightsAsync(); // error on the await in this line\n            //Weights = _weightService.GetWeightsAsync(); \n        }</code></pre>\n\nI get the error\r<br />\nError\t2\tCannot await 'System.Threading.Tasks.Task&lt;System.Collections.ObjectModel.ObservableCollection&lt;RightWeight.Pcl.Model.WeightRecord&gt;&gt;'\tC:\\Users\\Jeff\\Documents\\Visual Studio 2012\\Projects\\RightWeight\\RightWeight.Pcl\\ViewModel\\MainViewModel.cs\t53\t23\tRightWeight.Pcl<br />\n",
    "PostedDate": "2013-04-22T14:26:29.107-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1034202",
    "ThreadId": "441194",
    "Html": "Success!\r<br />\n<br />\nI created an entirely new project and wired it up again. This time when I created the PCL I targeted only windows 8 store and windows phone 8. Previously I had left the .net 4.5 target framework, Silverlight and targeted phone 7.5 rather than phone 8 hoping for BCL to work for async.\r<br />\n<br />\nIn the new project I noticed when I hovered over Task in the LoadData() the bubble help said '(awaitable) class System.Threading.Tasks.Task Represents an Asynchronous operation.' for grins I went back to the old project and hovered over the same Task. It indicated 'class System.Threading.Tasks.Task Represents an asynchronous operation.' Note it didn't indicate awaitable. \r<br />\n<br />\nGuess Task can come from a couple different places? <br />\n",
    "PostedDate": "2013-04-22T16:04:33.24-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1044657",
    "ThreadId": "441194",
    "Html": "@jhalbrecht - I ran into the same problem with &quot;cannot await&quot; errors.  It's some odd incompatibility between Assembly versions.  I found this cryptic NuGet issue resolution page on the subject:<br />\n<br />\n<a href=\"http://blogs.msdn.com/b/bclteam/p/asynctargetingpackkb.aspx\" rel=\"nofollow\">http://blogs.msdn.com/b/bclteam/p/asynctargetingpackkb.aspx</a><br />\n<br />\nI wish they had explained what the problem was and why the fix works, but the fix does work.  Here's what they say:<br />\n<br />\nIssue 2<br />\n<br />\nSymptom<br />\n<br />\nAfter installing the Microsoft.Bcl or Microsoft.Bcl.Async packages to certain projects, you may get build errors or warnings similar to:<br />\n<br />\nCannot await 'System.Threading.Tasks.Task'.<br />\n<br />\nor<br />\n<br />\nThe primary reference &quot;Microsoft.Threading.Tasks&quot; could not be resolved because it has an indirect dependency on the framework assembly &quot;System.Runtime, Version=1.5.10.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a&quot; which could not be resolved in the currently targeted framework. &quot;.NETFramework,Version=v4.0&quot;. To resolve this problem, either remove the reference &quot;Microsoft.Threading.Tasks&quot; or retarget your application to a framework version which contains &quot;System.Runtime, Version=1.5.10.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a&quot;.<br />\n<br />\nResolution<br />\n<br />\nMicrosoft.Bcl.Async package is not supported in Visual Basic Web Application projects. As a workaround, place all async/await usage in a class library and consume that from the Web Application project.<br />\n<br />\nOtherwise, for other project types add an App.Config to the project with the following contents, replacing [version] with the version (for example, 2.5.10.0) of System.Runtime and System.Threading.Tasks that you are referencing:<br />\n<br />\n&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;<br />\n&lt;configuration&gt;<br />\n  &lt;runtime&gt;<br />\n<pre><code>&lt;assemblyBinding xmlns=&quot;urn:schemas-microsoft-com:asm.v1&quot;&gt;\n  &lt;dependentAssembly&gt;\n    &lt;assemblyIdentity name=&quot;System.Runtime&quot; publicKeyToken=&quot;b03f5f7f11d50a3a&quot; culture=&quot;neutral&quot; /&gt;\n    &lt;bindingRedirect oldVersion=&quot;0.0.0.0-[version]&quot; newVersion=&quot;[version]&quot; /&gt;\n  &lt;/dependentAssembly&gt;\n  &lt;dependentAssembly&gt;\n    &lt;assemblyIdentity name=&quot;System.Threading.Tasks&quot; publicKeyToken=&quot;b03f5f7f11d50a3a&quot; culture=&quot;neutral&quot; /&gt;\n    &lt;bindingRedirect oldVersion=&quot;0.0.0.0-[version]&quot; newVersion=&quot;[version]&quot; /&gt;\n  &lt;/dependentAssembly&gt;\n&lt;/assemblyBinding&gt;</code></pre>\n\n&lt;/runtime&gt;<br />\n&lt;/configuration&gt;<br />\n<br />\nMake sure you capitalize the first word in App.Config.  In my case the DLLs I were using were 1.5.11.0 and replacing &quot;version&quot; (no quotes) with that value did the trick.  Just check the version number of your <em>System.Runtime</em> and <em>System.Threading.Tasks</em> in the properties window.  You'll see it in the path to the DLL(s).<br />\n<br />\n-- roschler<br />\n",
    "PostedDate": "2013-05-16T11:14:01.207-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]
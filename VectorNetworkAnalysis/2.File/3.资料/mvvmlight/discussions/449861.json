[
  {
    "Id": "1067730",
    "ThreadId": "449861",
    "Html": "I have this code<br />\n<pre><code>  public RelayCommand GoBackToAddPricePage { get; set; }\n\n        public const string SelectedStorePropertyName = &quot;SelectedStore&quot;;\n\n        private Store selectedStore;\n\n        public Store SelectedStore\n        {\n            get\n            {\n                return selectedStore;\n            }\n\n            set\n            {\n                RaisePropertyChanging(StoreSearchPropertyName);\n\n                if (value != null)\n                {\n                    selectedStore = value;\n                    GoBackToAddPricePage = new RelayCommand(goBackToAddPricePage);\n                    GoBackToAddPricePage.RaiseCanExecuteChanged();\n                }\n\n                RaisePropertyChanged(StoreSearchPropertyName);\n            }\n        }\n\n        private void goBackToAddPricePage()\n        {\n            Messenger.Default.Send(new Uri(&quot;/AddProductPrice.xaml&quot;, UriKind.Relative), &quot;NavigationRequest&quot;);\n        }\n</code></pre>\n\nI followed <a href=\"http://gavindraper.com/2013/01/14/mvvm-page-navigation-using-mvvm-light-on-wp7/\" rel=\"nofollow\">these instructions to navigate</a> back to a previous page but not sure how to do this as I want to leave to go back to my other view in my SelectedStore(which is bound to selectedItem).\r<br />\n<br />\nI tired just calling it directly but that failed so not sure if I need to hookup relaycommand somehow.<br />\n",
    "PostedDate": "2013-07-12T15:14:17.087-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1068456",
    "ThreadId": "449861",
    "Html": "I'm not entirely certain what your trying to achieve here. Can you not just bind your combobox to a property on your Viewmodel which holds your selected store? You could then navigate back. I haven't used the WPF navigation service in ages, the Prism one is probably better. I would imagine you have a parent view model where you could keep the selected store so your app is context aware.\r<br />\n<br />\nBind Your selected Item to a your VM:\r<br />\n<br />\nTo use interactions you need this in your page namespaces:<br />\n<pre><code>xmlns:i=&quot;clr-namespace:System.Windows.Interactivity;assembly=System.Windows.Interactivity&quot;</code></pre>\n\n<pre><code>&lt;telerik:RadComboBox x:Name=&quot;radcombo_theme&quot;\n                                         Width=&quot;200&quot;\n                                         SelectedValue=&quot;{Binding SelectedTheme}&quot;\n                                         ItemsSource=&quot;{Binding Source={StaticResource viewSource}}&quot;\n                                         ItemTemplate=&quot;{StaticResource ThemeComboTemplate}&quot;\n                                         Grid.Column=&quot;1&quot; Height=&quot;23&quot; VerticalAlignment=&quot;Top&quot;&gt;\n                        &lt;i:Interaction.Triggers&gt;\n                            &lt;i:EventTrigger EventName=&quot;SelectionChanged&quot;&gt;\n                                &lt;mvvm:EventToCommand Command=&quot;{Binding commandThemeChanged}&quot; PassEventArgsToCommand=&quot;True&quot; /&gt;\n                            &lt;/i:EventTrigger&gt;\n                        &lt;/i:Interaction.Triggers&gt;\n\n                    &lt;/telerik:RadComboBox&gt;</code></pre>\n\nIn your vm:<br />\n<pre><code>\n public class MyViewModelName: GalaSoft.MvvmLight.ViewModelBase, ICleanup\n    {\n\n     public XmlNodeItem SelectedTheme { get; set; }\n\n     public MyViewModelName()\n        {\n               this.commandThemeChanged = new RelayCommand&lt;object&gt;((s) =&gt; \n                                           {\n                                               System.Windows.Controls.SelectionChangedEventArgs args = s as System.Windows.Controls.SelectionChangedEventArgs;\n                                               if (args != null) { if (args.AddedItems.Count &gt; 0) \n                                                { \n                                                   _selectedTheme = args.AddedItems[0] as XmlNodeItem (need your bound type here);\n                                                }}\n                                           });</code></pre>\n\nNot sure if this helps what shows how you can keep the value of your SelectedStore in the VM.<br />\n",
    "PostedDate": "2013-07-15T08:11:04.897-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]
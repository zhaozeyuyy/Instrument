[
  {
    "Id": "1324852",
    "ThreadId": "572807",
    "Html": "Hello,<br />\n<br />\nI seemed to be getting jammed up trying to reference a command in my view model from a data template in another file.  I've tried following the examples <a href=\"http://stackoverflow.com/questions/2807562/relaycommand-sender-from-itemscontrol-item\" rel=\"nofollow\">here</a> and <a href=\"https://mvvmlight.codeplex.com/discussions/80447\" rel=\"nofollow\">here</a> (as well as others), but the results is always the same.  I'm getting a run time error of &quot;{&quot;Cannot find resource named 'Locator'. Resource names are case sensitive.&quot;}&quot;.<br />\n<br />\nFor what it's worth, my DataTemplate file looks like this:<br />\n<pre><code>&lt;ResourceDictionary xmlns=&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;\n                    xmlns:x=&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;\n                    xmlns:command=&quot;clr-namespace:GalaSoft.MvvmLight.Command;assembly=GalaSoft.MvvmLight.Extras&quot;\n                    xmlns:i=&quot;http://schemas.microsoft.com/expression/2010/interactivity&quot;&gt;\n    &lt;DataTemplate x:Key=&quot;DockPanelHeaderDataTemplate&quot;&gt;\n        &lt;StackPanel Orientation=&quot;Horizontal&quot;&gt;\n            &lt;Image Source=&quot;/Images/Add_16x16.png&quot;&gt;\n                &lt;Image.RenderTransform&gt;\n                    &lt;RotateTransform x:Name=&quot;AnimatedRotateTransform&quot; CenterX=&quot;8&quot; CenterY=&quot;8&quot; /&gt;\n                &lt;/Image.RenderTransform&gt;\n                &lt;Image.Triggers&gt;\n                    &lt;EventTrigger RoutedEvent=&quot;Image.MouseEnter&quot;&gt;\n                        &lt;BeginStoryboard&gt;\n                            &lt;Storyboard&gt;\n                                &lt;DoubleAnimation Duration=&quot;0:0:.5&quot;\n                                                 From=&quot;0&quot;\n                                                 Storyboard.TargetProperty=&quot;RenderTransform.Angle&quot;\n                                                 To=&quot;45&quot; /&gt;\n                            &lt;/Storyboard&gt;\n                        &lt;/BeginStoryboard&gt;\n                    &lt;/EventTrigger&gt;\n                    &lt;EventTrigger RoutedEvent=&quot;Image.MouseLeave&quot;&gt;\n                        &lt;BeginStoryboard&gt;\n                            &lt;Storyboard&gt;\n                                &lt;DoubleAnimation Duration=&quot;0:0:.5&quot;\n                                                 From=&quot;45&quot;\n                                                 Storyboard.TargetProperty=&quot;RenderTransform.Angle&quot;\n                                                 To=&quot;0&quot; /&gt;\n                            &lt;/Storyboard&gt;\n                        &lt;/BeginStoryboard&gt;\n                    &lt;/EventTrigger&gt;\n                &lt;/Image.Triggers&gt;\n                &lt;i:Interaction.Triggers&gt;\n                    &lt;i:EventTrigger EventName=&quot;Image.MouseEnter&quot;&gt;\n                        &lt;command:EventToCommand Command=&quot;{Binding MainWindow.FooCommand, Source={StaticResource Locator}}&quot; /&gt;\n                    &lt;/i:EventTrigger&gt;\n                &lt;/i:Interaction.Triggers&gt;\n            &lt;/Image&gt;\n            &lt;TextBlock Margin=&quot;10,0,0,0&quot; Text=&quot;{Binding}&quot; /&gt;\n        &lt;/StackPanel&gt;\n    &lt;/DataTemplate&gt;\n&lt;/ResourceDictionary&gt;</code></pre>\n\nMy viewmodel:<br />\n<pre><code>using System.Windows;\nusing GalaSoft.MvvmLight.Command;\nusing ViewModelBase = GalaSoft.MvvmLight.ViewModelBase;\nusing IMessageBoxService = DevExpress.Mvvm.IMessageBoxService;\n\nnamespace ESPDistributionDemoProgram.ViewModel\n{\n    /// &lt;summary&gt;\n    /// This class contains properties that a View can data bind to.\n    /// &lt;para&gt;\n    /// See http://www.galasoft.ch/mvvm\n    /// &lt;/para&gt;\n    /// &lt;/summary&gt;\n    public class MainViewModel : ViewModelBase\n    {\n        /// &lt;summary&gt;\n        /// Initializes a new instance of the MainViewModel class.\n        /// &lt;/summary&gt;\n        public MainViewModel(IMessageBoxService messageBoxService)\n        {\n            _messageBoxService = messageBoxService;\n        }\n\n        private RelayCommand _fooCommand;\n\n        public RelayCommand FooCommand\n        {\n            get\n            {\n                return _fooCommand\n                       ?? (_fooCommand = new RelayCommand(Foo));\n            }\n        }\n\n        private void Foo()\n        {\n            _messageBoxService.Show(&quot;This is a test.  Should get fired from DataTemplate&quot;, &quot;Success!&quot;, MessageBoxButton.OK, MessageBoxImage.Error, MessageBoxResult.OK);\n        }\n\n        private readonly IMessageBoxService _messageBoxService;\n    }\n}</code></pre>\n\nMy view:<br />\n<pre><code>&lt;Window x:Class=&quot;ESPDistributionDemoProgram.MainWindow&quot;\n        xmlns=&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;\n        xmlns:x=&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;\n        xmlns:d=&quot;http://schemas.microsoft.com/expression/blend/2008&quot;\n        xmlns:dx=&quot;http://schemas.devexpress.com/winfx/2008/xaml/core&quot;\n        xmlns:dxdo=&quot;http://schemas.devexpress.com/winfx/2008/xaml/docking&quot;\n        xmlns:dxe=&quot;http://schemas.devexpress.com/winfx/2008/xaml/editors&quot;\n        xmlns:ignore=&quot;http://www.ignore.com&quot;\n        xmlns:mc=&quot;http://schemas.openxmlformats.org/markup-compatibility/2006&quot;\n        xmlns:views=&quot;clr-namespace:ESPDistributionDemoProgram.Views&quot;\n        Title=&quot;Distribution Modeller&quot;\n        Icon=&quot;Images/robot1.ico&quot;\n        WindowState=&quot;Maximized&quot;\n        d:DesignHeight=&quot;1394&quot;\n        d:DesignWidth=&quot;1460&quot;\n        dx:ThemeManager.ThemeName=&quot;LightGray&quot;\n        mc:Ignorable=&quot;d ignore&quot;&gt;\n    &lt;Window.DataContext&gt;\n        &lt;Binding x:Name=&quot;This&quot;\n                 Path=&quot;MainWindow&quot;\n                 Source=&quot;{StaticResource Locator}&quot; /&gt;\n    &lt;/Window.DataContext&gt;\n    &lt;dx:BackgroundPanel&gt;\n        &lt;Grid&gt;\n            &lt;dxe:FlyoutControl Content=&quot;{Binding Path=PlacementTarget.Tag,\n                                                 RelativeSource={RelativeSource Self}}&quot;\n                               PlacementTarget=&quot;{Binding ElementName=HxINfoPanel}&quot;\n                               Style=&quot;{StaticResource CustomFlyoutControlStyle}&quot; /&gt;\n            &lt;dxdo:DockLayoutManager FloatingMode=&quot;Desktop&quot;&gt;\n                &lt;dxdo:LayoutGroup&gt;\n                    &lt;dxdo:LayoutGroup Orientation=&quot;Vertical&quot;&gt;\n                        &lt;dxdo:LayoutPanel x:Name=&quot;HxINfoPanel&quot;\n                                          AllowClose=&quot;False&quot;\n                                          AllowMinimize=&quot;True&quot;\n                                          Caption=&quot;Historical Information&quot;\n                                          CaptionTemplate=&quot;{StaticResource DockPanelHeaderDataTemplate}&quot;&gt;\n                            &lt;views:HistoricalDataView VerticalAlignment=&quot;Top&quot; /&gt;\n                        &lt;/dxdo:LayoutPanel&gt;\n\n                        &lt;dxdo:LayoutPanel AllowClose=&quot;False&quot;\n                                          AllowMinimize=&quot;True&quot;\n                                          Caption=&quot;Distribution Information&quot;\n                                          CaptionTemplate=&quot;{StaticResource DockPanelHeaderDataTemplate}&quot;&gt;\n                            &lt;views:DistributionView VerticalAlignment=&quot;Top&quot; /&gt;\n                        &lt;/dxdo:LayoutPanel&gt;\n                    &lt;/dxdo:LayoutGroup&gt;\n\n                    &lt;dxdo:LayoutPanel AllowClose=&quot;False&quot;\n                                      AllowMinimize=&quot;True&quot;\n                                      Caption=&quot;Simulation Information&quot;\n                                      CaptionTemplate=&quot;{StaticResource DockPanelHeaderDataTemplate}&quot;&gt;\n                        &lt;views:SimulationView /&gt;\n                    &lt;/dxdo:LayoutPanel&gt;\n                &lt;/dxdo:LayoutGroup&gt;\n            &lt;/dxdo:DockLayoutManager&gt;\n\n        &lt;/Grid&gt;\n    &lt;/dx:BackgroundPanel&gt;\n\n\n\n\n&lt;/Window&gt;\n</code></pre>\n\nand my ViewModelLocator:<br />\n<pre><code>\nusing DevExpress.Xpf.Core;\nusing GalaSoft.MvvmLight.Ioc;\nusing Microsoft.Practices.ServiceLocation;\n\nnamespace ESPDistributionDemoProgram.ViewModel\n{\n    /// &lt;summary&gt;\n    /// This class contains static references to all the view models in the\n    /// application and provides an entry point for the bindings.\n    /// &lt;para&gt;\n    /// See http://www.galasoft.ch/mvvm\n    /// &lt;/para&gt;\n    /// &lt;/summary&gt;\n    public class ViewModelLocator\n    {\n        static ViewModelLocator()\n        {\n            ServiceLocator.SetLocatorProvider(() =&gt; SimpleIoc.Default);\n\n            SimpleIoc.Default.Register(() =&gt; new MainViewModel(new DXMessageBoxService()));\n            SimpleIoc.Default.Register&lt;DistributionViewModel&gt;();\n            SimpleIoc.Default.Register(()=&gt; new HistoricalDataViewModel(new DXMessageBoxService()));\n            SimpleIoc.Default.Register&lt;SimulationViewModel&gt;();\n\n        }\n\n        public HistoricalDataViewModel HistoricalData\n        {\n            get { return ServiceLocator.Current.GetInstance&lt;HistoricalDataViewModel&gt;(); }\n        }\n\n        public DistributionViewModel Distribution\n        {\n            get { return ServiceLocator.Current.GetInstance&lt;DistributionViewModel&gt;(); }\n        }\n\n        public SimulationViewModel Simulation\n        {\n            get { return ServiceLocator.Current.GetInstance&lt;SimulationViewModel&gt;(); }\n        }\n\n        public MainViewModel MainWindow\n        {\n            get { return ServiceLocator.Current.GetInstance&lt;MainViewModel&gt;(); }\n        }\n\n   \n        /// &lt;summary&gt;\n        /// Cleans up all the resources.\n        /// &lt;/summary&gt;\n        public static void Cleanup()\n        {\n        }\n    }\n}</code></pre>\n\nI've narrowed down the issue to be specifically in my DataTemplate on this line:<br />\n<pre><code> &lt;command:EventToCommand Command=&quot;{Binding MainWindow.FooCommand, Source={StaticResource Locator}}&quot; /&gt;</code></pre>\n\nThe Intellisense works, with I type that line...so Visual Studio knows that the Locator exists, but not the compiler.  I'm hoping it's something simple that I'm over looking, but I just can't seem to put my finger on it.<br />\n<br />\nAny help you can provide is greatly appreciated.<br />\n<br />\nThanks in advance<br />\n",
    "PostedDate": "2014-11-21T10:56:13.91-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]
{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "",
    "ClosedDate": null,
    "CommentCount": 4,
    "Custom": null,
    "Description": "I've come across what I think is a bug in RelayCommand (at least for WPF 4.0):\r\n* If you attempt to construct a RelayCommand with a lambda expression composed entirely of compile-time constants, e.g., __() => DoSomething(2)__, it works as expected.\r\n* However, if the lambda expression contains a method call with a parameter, and the value passed into that parameter is determined at runtime, e.g., __() => DoSomething(number)__, nothing happens when the command is executed.\r\n\r\nIf you put the code below into a WPF 4.0 project and build it in Debug mode, you will notice that if you click \"Do Something\", nothing happens, but if you click \"Do Something Else\", a \"2\" appears in the output window. (Similarly, if you put a breakpoint in the DoSomething method, it will only be hit if you click \"Do Something Else\".)\r\n\r\nMainWindow.xaml:\r\n\r\n```\r\n<Window xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\r\n        xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"\r\n        xmlns:d=\"http://schemas.microsoft.com/expression/blend/2008\"\r\n        xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\"\r\n        xmlns:local=\"clr-namespace:WpfApplication1\"\r\n        mc:Ignorable=\"d\"\r\n        x:Class=\"WpfApplication1.MainWindow\"\r\n        Title=\"MainWindow\"\r\n        Height=\"400\"\r\n        Width=\"400\">\r\n    <Window.DataContext>\r\n        <local:MainWindowViewModel />\r\n    </Window.DataContext>\r\n    <StackPanel>\r\n        <Button Content=\"Do Something\"\r\n                Command=\"{Binding DoSomethingCommand}\" />\r\n        <Button Margin=\"0,10,0,0\"\r\n                Content=\"Do Something Else\"\r\n                Command=\"{Binding DoSomethingElseCommand}\" />\r\n    </StackPanel>\r\n</Window>\r\n```\r\n\r\nMainWindowViewModel.cs\r\n\r\n```\r\nnamespace WpfApplication1\r\n{\r\n    public class MainWindowViewModel : ViewModelBase\r\n    {\r\n        public ICommand DoSomethingCommand { get; private set; }\r\n        public ICommand DoSomethingElseCommand { get; private set; }\r\n\r\n        public MainWindowViewModel()\r\n        {\r\n            DoSomethingCommand = GetCommand(2);\r\n            DoSomethingElseCommand = new RelayCommand(() => DoSomething(2));\r\n        }\r\n\r\n        private ICommand GetCommand(int number)\r\n        {\r\n            return new RelayCommand(() => DoSomething(number));\r\n        }\r\n\r\n        private void DoSomething(int number)\r\n        {\r\n            Debug.Print(number.ToString());\r\n        }\r\n    }\r\n}\r\n```",
    "LastUpdatedDate": "2017-12-08T09:36:31.49-08:00",
    "PlannedForRelease": "null",
    "ReleaseVisibleToPublic": false,
    "Priority": {
      "Name": "Low",
      "Severity": 50,
      "Id": 1
    },
    "ProjectName": "mvvmlight",
    "ReportedDate": "2013-03-26T14:38:34.06-07:00",
    "Status": {
      "Name": "Active",
      "Id": 2
    },
    "ReasonClosed": {
      "Name": "Unassigned"
    },
    "Summary": "RelayCommand fails if delegate contains a non-constant method parameter",
    "Type": {
      "Name": "Issue",
      "Id": 3
    },
    "VoteCount": 3,
    "Id": 7605
  },
  "FileAttachments": [],
  "Comments": [
    {
      "Message": "Here are links:\n•\tMVVM-WPF XAML Mark-up Binding Extensions - http://wpfmvvmbindingext.codeplex.com\n•\tMVVM-WPF XAML Mark-up Dependency Injection Binding Extensions - http://wpfmvvmbindingiocext.codeplex.com \n\nThey will help to solve ",
      "PostedDate": "2013-05-18T09:07:10.093-07:00",
      "Id": 100532
    },
    {
      "Message": "I ran into the same issue.\n\nWe sometimes use our own WPF helper library which includes the RelayCommand by Josh Smith. That implementation does work in this specific case.\n\nhttp://msdn.microsoft.com/en-us/magazine/dd419663.aspx",
      "PostedDate": "2014-04-02T01:44:04.54-07:00",
      "Id": 140265
    },
    {
      "Message": "Same problem found. I assume it's essentially this:\n\nhttp://stackoverflow.com/questions/25730530/bug-in-weakaction-in-case-of-closure-action\n",
      "PostedDate": "2014-10-01T08:30:16.42-07:00",
      "Id": 161194
    },
    {
      "Message": "Hi,\n\n I just published an alpha version of V5.4.0 to Nuget. This version proposes a fix to this issue. This requires setting a new parameter called keepTargetAlive to true when you call Register. Note that while this allows using a closure, this also risks causing a (small) memory leak. \n\n I have preliminary documentation here: [http://www.mvvmlight.net/doc/weakaction.cshtml]. A more detailed article will be published as soon as I have time to finish it..\n\n Hopefully this helps. This is an alpha, which means I am interested on your feedback.\n\n Thanks!\n Laurent",
      "PostedDate": "2016-12-04T09:42:00.153-08:00",
      "Id": 205465
    }
  ]
}